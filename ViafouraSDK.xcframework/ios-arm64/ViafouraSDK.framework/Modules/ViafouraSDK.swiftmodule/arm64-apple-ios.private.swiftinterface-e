// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios15.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ViafouraSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AdSupport
import AppTrackingTransparency
import CoreData
import CoreLocation
import DeveloperToolsSupport
import Foundation
import Network
import SafariServices
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFModeratorView : UIKit.UIView {
  @objc deinit
}
public struct CommentError : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFDislikeChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFDislikeChatError, b: ViafouraSDK.VFDislikeChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFDislikeChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func makeTopComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFTopCommentError>)
}
public enum VFTopCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFTopCommentError, b: ViafouraSDK.VFTopCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFTopCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEditorPicksView : UIKit.UIView {
  @objc deinit
}
public struct VFColors : Swift.Equatable {
  public init(colorPrimary: UIKit.UIColor = VFDefaultColors.colorPrimaryDefault(), colorPrimaryLight: UIKit.UIColor = VFDefaultColors.colorPrimaryLightDefault(), colorBackground: UIKit.UIColor = VFDefaultColors.colorBackgroundDefault(), colorSeparator: UIKit.UIColor = VFDefaultColors.colorSeparatorDefault(), colorIcons: UIKit.UIColor = VFDefaultColors.colorIcons(), colorAvatars: [UIKit.UIColor] = Constants.AvatarColors.colors)
  public static func == (a: ViafouraSDK.VFColors, b: ViafouraSDK.VFColors) -> Swift.Bool
}
public struct VFDefaultColors {
  public static func colorBackgroundDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorText1Default(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorText2Default(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorSeparatorDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func skeletonGradientBackgroundColor(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func skeletonGradientHightlightColor(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorErrorDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorWarningDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorStarDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorEditorPicksDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorThreadingLines(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorChatBubbleDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorPinnedDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorPinnedBadgeDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorPrimaryDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorPrimaryLightDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorBorder1Default(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorBorder2Default(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorAuthorBadgeDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorModeratorBadgeDefault(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorNewCommentText(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorIcons(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
  public static func colorInputBox(_ forTheme: ViafouraSDK.VFTheme = .light) -> UIKit.UIColor
}
public struct CommentContainerByIdResponse : Swift.Decodable {
  public let content_container_uuid: Foundation.UUID
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserMutesResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFAwaitingModerationView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEmptyModerationView : UIKit.UIView {
  @objc deinit
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func createCommentReply(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, articleMetadata: ViafouraSDK.VFArticleMetadata, content: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Foundation.UUID, ViafouraSDK.VFCreateCommentReplyError>)
}
public enum VFCreateCommentReplyError : Foundation.LocalizedError {
  case unknown
  case banned(banResponse: ViafouraSDK.BanResponse)
  case unauthorized
}
extension ViafouraSDK.VFCreateCommentReplyError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFTextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ViafouraSDK.VFAuthenticationServiceImplementation {
  public func getUserLoginStatus(completion: @escaping ((Swift.Result<ViafouraSDK.VFLoginStatus, Swift.Never>) -> Swift.Void))
  public func getUserLoginStatus() async -> (Swift.Result<ViafouraSDK.VFLoginStatus, Swift.Never>)
}
public enum VFLoginStatus {
  case notLoggedIn
  case loggedIn(userUUID: Foundation.UUID)
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func unflagComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUnflagCommentError>)
}
public enum VFUnflagCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnflagCommentError, b: ViafouraSDK.VFUnflagCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnflagCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol VFAdDelegate : ObjectiveC.NSObject {
  func generateAd(viewController: ViafouraSDK.VFUIViewController, adPosition: Swift.Int) -> ViafouraSDK.VFAdView?
  func getAdInterval(viewController: ViafouraSDK.VFUIViewController) -> Swift.Int
  func getFirstAdPosition(viewController: ViafouraSDK.VFUIViewController) -> Swift.Int
}
extension ViafouraSDK.VFAdDelegate {
  public func getFirstAdPosition(viewController: ViafouraSDK.VFUIViewController) -> Swift.Int
}
public protocol VFLocalAdDelegate : ObjectiveC.NSObject {
  func generateAd(adPosition: Swift.Int) -> ViafouraSDK.VFAdView?
  func getAdInterval() -> Swift.Int
  func getFirstAdPosition() -> Swift.Int
}
extension ViafouraSDK.VFLocalAdDelegate {
  public func getFirstAdPosition() -> Swift.Int
}
public struct ServerError : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct ServerErrorData : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func flagComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, flagReason: Swift.String?, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFFlagCommentError>)
}
public enum VFFlagCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFFlagCommentError, b: ViafouraSDK.VFFlagCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFFlagCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFLikeReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFLikeReviewError, b: ViafouraSDK.VFLikeReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFLikeReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol VFLiveCommentsService {
  func spamComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFSpamCommentError>)
  func getComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<ViafouraSDK.CommentResponse, ViafouraSDK.VFCommentError>) -> Swift.Void))
  func getComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async throws -> (Swift.Result<ViafouraSDK.CommentResponse, ViafouraSDK.VFCommentError>)
  func makeTopComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFTopCommentError>)
  func enableComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFEnableCommentError>)
  func disableComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFDisableCommentError>)
  func getUserComments(sectionUUID: Foundation.UUID, userUUID: Foundation.UUID, limit: Swift.Int) async -> (Swift.Result<[ViafouraSDK.CommentResponse], ViafouraSDK.VFUserCommentsError>)
  func editorPickComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFEditorPickCommentError>)
  func createMedia(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, imageData: Foundation.Data) async -> (Swift.Result<ViafouraSDK.CreateCommentMediaResponse, ViafouraSDK.VFCreateCommentMediaError>)
  func removeTopComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFRemoveTopCommentError>)
  func removeEditorPickComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFRemoveEditorPickCommentError>)
  func unpinComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUnpinCommentError>)
  func unspamComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUnspamCommentError>)
  func editComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, articleMetadata: ViafouraSDK.VFArticleMetadata, content: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFEditCommentError>)
  func pinComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFPinCommentError>)
  func undislikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUndislikeCommentError>)
  func unflagComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUnflagCommentError>)
  func flagComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, flagReason: Swift.String?, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFFlagCommentError>)
  func likeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFLikeCommentError>)
  func dislikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFDislikeCommentError>)
  func createComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, articleMetadata: ViafouraSDK.VFArticleMetadata, content: Swift.String, mediaUUIDS: [Swift.String], syndicationKey: Swift.String?) async -> (Swift.Result<Foundation.UUID, ViafouraSDK.VFCreateCommentError>)
  func createCommentReply(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, articleMetadata: ViafouraSDK.VFArticleMetadata, content: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Foundation.UUID, ViafouraSDK.VFCreateCommentReplyError>)
  func trendingComments(sectionUUID: Foundation.UUID, limit: Swift.Int, contentContainerWindowDays: Swift.Int?, contentContainerWindowHours: Swift.Int, sortedBy: ViafouraSDK.VFTrendingSortType) async -> (Swift.Result<[ViafouraSDK.TrendingResultResponse], ViafouraSDK.VFTrendingError>)
  func updateCommentContainerSettings(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, isHidden: Swift.Bool, expiryTime: Swift.Int64?, isContentPremoderationEnabled: Swift.Bool) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUpdateCommentsContainerSettingsError>)
  func getCommentContainer(sectionUUID: Foundation.UUID, containerId: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<ViafouraSDK.CommentContainerByIdResponse, ViafouraSDK.VFCommentContainerError>)
  func getCommentContainer(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID) async throws -> (Swift.Result<ViafouraSDK.CommentContainerByIdResponse, ViafouraSDK.VFCommentContainerError>)
  func getCommentsProfile(sectionUUID: Foundation.UUID, userUUID: Foundation.UUID) async -> (Swift.Result<ViafouraSDK.CommentsProfileResponse, ViafouraSDK.VFCommentsProfileError>)
  func deleteComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFDeleteCommentError>)
  func getCommentsReplies(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, limit: Swift.Int, startingFrom: Swift.String?, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<[ViafouraSDK.CommentResponse], ViafouraSDK.VFCommentRepliesError>) -> Swift.Void))
  func getCommentsReplies(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, limit: Swift.Int, startingFrom: Swift.String?, syndicationKey: Swift.String?) async throws -> (Swift.Result<[ViafouraSDK.CommentResponse], ViafouraSDK.VFCommentRepliesError>)
  func unlikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUnlikeCommentError>)
  func getComments(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, limit: Swift.Int, replyLimit: Swift.Int, startingFrom: Swift.String?, filteredBy: Swift.String?, sortType: ViafouraSDK.VFSortType, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<ViafouraSDK.CommentListResponse, ViafouraSDK.VFCommentListError>) -> Swift.Void))
  func getComments(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, limit: Swift.Int, replyLimit: Swift.Int, startingFrom: Swift.String?, filteredBy: Swift.String?, sortType: ViafouraSDK.VFSortType, syndicationKey: Swift.String?) async throws -> (Swift.Result<ViafouraSDK.CommentListResponse, ViafouraSDK.VFCommentListError>)
  func commentCount(sectionUUID: Foundation.UUID?, containerId: Swift.String, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<Swift.Int, ViafouraSDK.VFCommentCountError>) -> Swift.Void))
  func commentCount(sectionUUID: Foundation.UUID?, containerId: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Int, ViafouraSDK.VFCommentCountError>)
}
@_hasMissingDesignatedInitializers public class VFLiveCommentsServiceImplementation : ViafouraSDK.VFLiveCommentsService {
  @objc deinit
}
public enum VFChatListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFChatListError, b: ViafouraSDK.VFChatListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFChatListError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUpdateUserAvatarError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUpdateUserAvatarError, b: ViafouraSDK.VFUpdateUserAvatarError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUpdateUserAvatarError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFTheme {
  case dark
  case light
  public static func == (a: ViafouraSDK.VFTheme, b: ViafouraSDK.VFTheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias VFActionsCallbacks = (ViafouraSDK.VFActionCallbackType) -> Swift.Void
public enum VFActionCallbackType {
  case seeMoreCommentsPressed
  case writeNewCommentPressed(actionType: ViafouraSDK.VFNewCommentActionType)
  case closeNewCommentPressed
  case openProfilePressed(userUUID: Foundation.UUID, presentationType: ViafouraSDK.VFProfilePresentationType)
  case notificationPressed(presentationType: ViafouraSDK.VFNotificationPresentationType)
  case closeProfilePressed
  case trendingArticlePressed(metadata: ViafouraSDK.VFArticleMetadata, containerId: Swift.String)
  case commentPosted(contentUUID: Foundation.UUID)
  case replyPosted(contentUUID: Foundation.UUID)
  case authPressed(promptType: ViafouraSDK.VFAuthPromptType)
}
public enum VFAuthPromptType {
  case dislike
  case like
  case standaloneBellPressed
  case bellPressed
  case header
  case postContent
  case followConversation
  case followUser
  case muteUser
  public static func == (a: ViafouraSDK.VFAuthPromptType, b: ViafouraSDK.VFAuthPromptType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VFNotificationPresentationType {
  case profile(userUUID: Foundation.UUID)
  case content(containerUUID: Foundation.UUID, contentUUID: Foundation.UUID, containerId: Swift.String, articleMetadata: ViafouraSDK.VFArticleMetadata)
}
public enum VFProfilePresentationType {
  case profile
  case feed
  public static func == (a: ViafouraSDK.VFProfilePresentationType, b: ViafouraSDK.VFProfilePresentationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEmptyChatsView : UIKit.UIView {
  @objc deinit
}
public enum VFNewCommentActionType : Swift.Equatable {
  case create
  case reply(content: Foundation.UUID)
  case edit(content: Foundation.UUID)
  public static func == (a: ViafouraSDK.VFNewCommentActionType, b: ViafouraSDK.VFNewCommentActionType) -> Swift.Bool
}
public enum VFSubmitContentError : Foundation.LocalizedError {
  case unknown
  case banned(banResponse: ViafouraSDK.BanResponse)
}
public enum VFSingleChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFSingleChatError, b: ViafouraSDK.VFSingleChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFSingleChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFClosePollError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFClosePollError, b: ViafouraSDK.VFClosePollError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFClosePollError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFCreateReviewError : Foundation.LocalizedError {
  case unknown
  case unauthorized
  public static func == (a: ViafouraSDK.VFCreateReviewError, b: ViafouraSDK.VFCreateReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCreateReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct EventTestInfo : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommentListResponse : Swift.Decodable {
  public let contents: [ViafouraSDK.CommentResponse]
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommentResponse : Swift.Decodable {
  public let actor_uuid: Foundation.UUID
  public var content: Swift.String
  public let date_created: Swift.Int64
  public init(from decoder: any Swift.Decoder) throws
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func dislikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFDislikeCommentError>)
}
public enum VFDislikeCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFDislikeCommentError, b: ViafouraSDK.VFDislikeCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFDislikeCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class AnalyticsServiceImplementation {
  public func addWidget(_ widgetType: ViafouraSDK.WidgetType, uniqueUUID: Foundation.UUID)
  public func removeWidget(_ widgetType: ViafouraSDK.WidgetType, uniqueUUID: Foundation.UUID)
  public func logLoadMoreClick(tab: Swift.String, eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: ViafouraSDK.VFArticleMetadata)
  public func logConversationsBellClick(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: ViafouraSDK.VFArticleMetadata)
  public func logTrayTriggerClick()
  public func logSortChange(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: ViafouraSDK.VFArticleMetadata, sort: Swift.String, defaultSort: Swift.String, oldSort: Swift.String)
  public func logEventEngage(timeInPage: Swift.Int64, vfTime: Swift.Int64, hiddenTime: Swift.Int64?, focuses: Swift.Int, containerTimes: [ViafouraSDK.VFEventEngageContainerTime])
  public func logTrackAdCode(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, articleMetadata: ViafouraSDK.VFArticleMetadata, status: Swift.String, failureReason: Swift.String, widgetType: ViafouraSDK.WidgetType)
  public func logTrackAdView(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID? = nil, articleMetadata: ViafouraSDK.VFArticleMetadata? = nil, adIntegration: Swift.String, limit: Swift.Int, childLimit: Swift.Int, scrollDepth: CoreFoundation.CGFloat, promoInterval: Swift.Int, firstPromoPosition: Swift.Int, totalCount: Swift.Int, index: Swift.Int, threadType: Swift.String, widgetType: ViafouraSDK.WidgetType)
  public func logLogout()
  public func logTrackAd(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID? = nil, articleMetadata: ViafouraSDK.VFArticleMetadata? = nil, adIntegration: Swift.String, limit: Swift.Int? = nil, childLimit: Swift.Int? = nil, scrollDepth: CoreFoundation.CGFloat, promoInterval: Swift.Int? = nil, firstPromoPosition: Swift.Int, totalCount: Swift.Int? = nil, index: Swift.Int, threadType: Swift.String? = nil, widgetType: ViafouraSDK.WidgetType)
  public func logInteraction(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: ViafouraSDK.VFArticleMetadata, label: Swift.String, action: Swift.String)
  public func logPasswordReset(email: Swift.String)
  public func logSignup(loginType: Swift.String)
  public func logLoginFailure(loginType: Swift.String, error: Swift.String)
  public func logLoginSuccess()
  public func logContainerLoad(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, allCommentsCount: Swift.Int, eventContainerUUID: Foundation.UUID, eventArticleMetadata: ViafouraSDK.VFArticleMetadata, contentContainerType: Swift.String)
  public func logPageView(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: ViafouraSDK.VFArticleMetadata)
  public func logEventAttemptedAction(eventAttemptedAction: ViafouraSDK.EventAttemptedAction, eventContainerId: Swift.String?, eventSectionUUID: Foundation.UUID, eventArticleMetadata: ViafouraSDK.VFArticleMetadata?)
  public func logABTestEvent(eventTestInfo: ViafouraSDK.EventTestInfo, eventContainerId: Swift.String?, eventSectionUUID: Foundation.UUID, eventArticleMetadata: ViafouraSDK.VFArticleMetadata?)
  @objc deinit
}
public enum VFCommentContainerSignatureError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCommentContainerSignatureError, b: ViafouraSDK.VFCommentContainerSignatureError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCommentContainerSignatureError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFChatSelectionError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFChatSelectionError, b: ViafouraSDK.VFChatSelectionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFChatSelectionError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFEnableChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFEnableChatError, b: ViafouraSDK.VFEnableChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFEnableChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFChatModerationListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFChatModerationListError, b: ViafouraSDK.VFChatModerationListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFChatModerationListError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFAuthenticationServiceImplementation {
  public func login(email: Swift.String, password: Swift.String, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFLoginError>) -> Swift.Void))
}
public enum VFLoginError : Foundation.LocalizedError {
  case banned(banData: ViafouraSDK.ServerErrorData)
  case unknown
}
extension ViafouraSDK.VFLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFAuthenticationServiceImplementation {
  public func logout()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func likeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFLikeCommentError>)
}
public enum VFLikeCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFLikeCommentError, b: ViafouraSDK.VFLikeCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFLikeCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func enableComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFEnableCommentError>)
}
public enum VFEnableCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFEnableCommentError, b: ViafouraSDK.VFEnableCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFEnableCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class KeychainServiceImplementation {
  open subscript(key: Swift.String) -> Swift.String? {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VFLiveReviewsServiceImplementation {
  @objc deinit
}
public enum EventAttemptedAction : Swift.String, Swift.Encodable {
  case LIVECHAT_LIKED
  case LIVECHAT_DISLIKED
  case LIVECHAT_FLAG
  case COMMENT_POST
  case COMMENT_DISLIKED
  case COMMENT_FLAG
  case COMMENT_BOX_CLICK
  case COMMENT_REPLY_CLICK
  case COMMENT_LIKED
  case TRAY_PROFILE_CLICK
  case FOLLOW_CONVERSATION
  case TRAY_COMMUNITY_CLICK
  case TOPIC_FOLLOW
  case PROFILE_MUTE_USER
  case PROFILE_FOLLOW_USER
  case LOGIN
  case SIGNUP
  case POLLS_VOTE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CommentNode {
  @objc deinit
}
public enum CommentNodeType {
  case ad
  case divider
  case comment
  case writeReply
  case followPrompt
  public static func == (a: ViafouraSDK.CommentNodeType, b: ViafouraSDK.CommentNodeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func updateCommentContainerSettings(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, isHidden: Swift.Bool, expiryTime: Swift.Int64?, isContentPremoderationEnabled: Swift.Bool) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUpdateCommentsContainerSettingsError>)
}
public enum VFUpdateCommentsContainerSettingsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUpdateCommentsContainerSettingsError, b: ViafouraSDK.VFUpdateCommentsContainerSettingsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUpdateCommentsContainerSettingsError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFAuthorView : UIKit.UIView {
  @objc deinit
}
public enum VFDisableChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFDisableChatError, b: ViafouraSDK.VFDisableChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFDisableChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnspamReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnspamReviewError, b: ViafouraSDK.VFUnspamReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnspamReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFVerticalTrendingViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(containerId: Swift.String?, title: Swift.String, limit: Swift.Int, daysPublished: Swift.Int?, trendWindow: Swift.Int, sort: ViafouraSDK.VFTrendingSortType, settings: ViafouraSDK.VFSettings, sectionUUID: Foundation.UUID? = nil) -> ViafouraSDK.VFVerticalTrendingViewController
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setAdDelegate(adDelegate: any ViafouraSDK.VFAdDelegate)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping ViafouraSDK.VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setLayoutDelegate(layoutDelegate: any ViafouraSDK.VFLayoutDelegate)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any ViafouraSDK.VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ViafouraSDK.VFVerticalTrendingViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
}
extension ViafouraSDK.VFVerticalTrendingViewController : ViafouraSDK.VFLocalAdDelegate {
  @_Concurrency.MainActor @preconcurrency public func generateAd(adPosition: Swift.Int) -> ViafouraSDK.VFAdView?
  @_Concurrency.MainActor @preconcurrency public func getAdInterval() -> Swift.Int
}
extension ViafouraSDK.VFVerticalTrendingViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMove(toParent parent: UIKit.UIViewController?)
}
extension ViafouraSDK.VFVerticalTrendingViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFRatingsSummaryView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension ViafouraSDK.VFRatingsSummaryView : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
public enum VFUnflagChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnflagChatError, b: ViafouraSDK.VFUnflagChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnflagChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUndislikeReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUndislikeReviewError, b: ViafouraSDK.VFUndislikeReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUndislikeReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFSegmentedControl : UIKit.UISegmentedControl {
  @objc deinit
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func getCommentContainer(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID) async throws -> (Swift.Result<ViafouraSDK.CommentContainerByIdResponse, ViafouraSDK.VFCommentContainerError>)
}
public enum VFLikeChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFLikeChatError, b: ViafouraSDK.VFLikeChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFLikeChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func removeTopComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFRemoveTopCommentError>)
}
public enum VFRemoveTopCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFRemoveTopCommentError, b: ViafouraSDK.VFRemoveTopCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFRemoveTopCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFVotePollError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFVotePollError, b: ViafouraSDK.VFVotePollError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFVotePollError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFFeaturedView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFCarouselTrendingViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(containerId: Swift.String?, title: Swift.String, limit: Swift.Int, daysPublished: Swift.Int?, trendWindow: Swift.Int, sort: ViafouraSDK.VFTrendingSortType, settings: ViafouraSDK.VFSettings, sectionUUID: Foundation.UUID? = nil) -> ViafouraSDK.VFCarouselTrendingViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setAdDelegate(adDelegate: any ViafouraSDK.VFAdDelegate)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping ViafouraSDK.VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setLayoutDelegate(layoutDelegate: any ViafouraSDK.VFLayoutDelegate)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any ViafouraSDK.VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ViafouraSDK.VFCarouselTrendingViewController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension ViafouraSDK.VFCarouselTrendingViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
extension ViafouraSDK.VFCarouselTrendingViewController : ViafouraSDK.VFLocalAdDelegate {
  @_Concurrency.MainActor @preconcurrency public func generateAd(adPosition: Swift.Int) -> ViafouraSDK.VFAdView?
  @_Concurrency.MainActor @preconcurrency public func getAdInterval() -> Swift.Int
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func getCommentsProfile(sectionUUID: Foundation.UUID, userUUID: Foundation.UUID) async -> (Swift.Result<ViafouraSDK.CommentsProfileResponse, ViafouraSDK.VFCommentsProfileError>)
}
public enum VFCommentsProfileError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCommentsProfileError, b: ViafouraSDK.VFCommentsProfileError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCommentsProfileError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEnablePushView : UIKit.UIView {
  @objc deinit
}
public enum VFPollContainerError : Foundation.LocalizedError {
  case notFound
  case unknown
  public static func == (a: ViafouraSDK.VFPollContainerError, b: ViafouraSDK.VFPollContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFPollContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFRatingsPromptView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFSkeletonView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageService {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFUIViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum VFFlagReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFFlagReviewError, b: ViafouraSDK.VFFlagReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFFlagReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol VFLoginDelegate : AnyObject {
  func startLogin()
}
public enum VFFilterType {
  case allComments
  case featured
  case topComments
  public static func == (a: ViafouraSDK.VFFilterType, b: ViafouraSDK.VFFilterType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VFUndislikeChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUndislikeChatError, b: ViafouraSDK.VFUndislikeChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUndislikeChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct CreateCommentMediaResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct UnmuteUserResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFDislikeReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFDislikeReviewError, b: ViafouraSDK.VFDislikeReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFDislikeReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol VFAuthenticationService {
  func cookieLogin(token: Swift.String, completion: @escaping ((Swift.Result<ViafouraSDK.VFCookieLoginData, ViafouraSDK.VFCookieLoginError>) -> Swift.Void))
  func logout()
  func login(email: Swift.String, password: Swift.String, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFLoginError>) -> Swift.Void))
  func openIdLogin(token: Swift.String, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFOpenIdLoginError>) -> Swift.Void))
  func socialLogin(token: Swift.String, provider: ViafouraSDK.VFSocialLoginProvider, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFSocialLoginError>) -> Swift.Void))
  func loginRadiusLogin(token: Swift.String, provider: ViafouraSDK.VFSocialLoginProvider, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFLoginRadiusLoginError>) -> Swift.Void))
  func resetPassword(email: Swift.String, completion: @escaping ((Swift.Result<Swift.Bool, ViafouraSDK.VFPasswordResetError>) -> Swift.Void))
  func signup(name: Swift.String, email: Swift.String, password: Swift.String, recaptchaToken: Swift.String?, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFSignUpError>) -> Swift.Void))
  func getUserLoginStatus(completion: @escaping ((Swift.Result<ViafouraSDK.VFLoginStatus, Swift.Never>) -> Swift.Void))
  func getUserLoginStatus() async -> (Swift.Result<ViafouraSDK.VFLoginStatus, Swift.Never>)
}
@_hasMissingDesignatedInitializers public class VFAuthenticationServiceImplementation : ViafouraSDK.VFAuthenticationService {
  @objc deinit
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func editorPickComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFEditorPickCommentError>)
}
public enum VFEditorPickCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFEditorPickCommentError, b: ViafouraSDK.VFEditorPickCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFEditorPickCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFAuthenticationServiceImplementation {
  public func signup(name: Swift.String, email: Swift.String, password: Swift.String, recaptchaToken: Swift.String? = nil, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFSignUpError>) -> Swift.Void))
}
public enum VFSignUpError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFSignUpError, b: ViafouraSDK.VFSignUpError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFSignUpError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFAuthenticationServiceImplementation {
  public func socialLogin(token: Swift.String, provider: ViafouraSDK.VFSocialLoginProvider, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFSocialLoginError>) -> Swift.Void))
}
public enum VFSocialLoginError : Foundation.LocalizedError {
  case unknown
  case banned(banData: ViafouraSDK.ServerErrorData)
}
extension ViafouraSDK.VFSocialLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func getCommentContainer(sectionUUID: Foundation.UUID, containerId: Swift.String, syndicationKey: Swift.String? = nil) async -> (Swift.Result<ViafouraSDK.CommentContainerByIdResponse, ViafouraSDK.VFCommentContainerError>)
}
public enum VFCommentContainerError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCommentContainerError, b: ViafouraSDK.VFCommentContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCommentContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func unlikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUnlikeCommentError>)
}
public enum VFUnlikeCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnlikeCommentError, b: ViafouraSDK.VFUnlikeCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnlikeCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUserMutesError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUserMutesError, b: ViafouraSDK.VFUserMutesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUserMutesError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnmuteUserError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnmuteUserError, b: ViafouraSDK.VFUnmuteUserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnmuteUserError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFMuteUserError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFMuteUserError, b: ViafouraSDK.VFMuteUserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFMuteUserError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFSpamView : UIKit.UIView {
  @objc deinit
}
public enum VFFlagChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFFlagChatError, b: ViafouraSDK.VFFlagChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFFlagChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFAuthenticationServiceImplementation {
  public func openIdLogin(token: Swift.String, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFOpenIdLoginError>) -> Swift.Void))
}
public enum VFOpenIdLoginError : Foundation.LocalizedError {
  case unknown
  case banned(banData: ViafouraSDK.ServerErrorData)
}
extension ViafouraSDK.VFOpenIdLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnflagReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnflagReviewError, b: ViafouraSDK.VFUnflagReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnflagReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct UserResponse : Swift.Decodable {
  public let id: Swift.Int64
  public let pic_small: Swift.String?
  public let pic_large: Swift.String?
  public let name: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public protocol VFLayoutDelegate : ObjectiveC.NSObject {
  func containerHeightUpdated(viewController: ViafouraSDK.VFUIViewController, height: CoreFoundation.CGFloat)
}
public enum VFDeleteChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFDeleteChatError, b: ViafouraSDK.VFDeleteChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFDeleteChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func createComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, articleMetadata: ViafouraSDK.VFArticleMetadata, content: Swift.String, mediaUUIDS: [Swift.String], syndicationKey: Swift.String?) async -> (Swift.Result<Foundation.UUID, ViafouraSDK.VFCreateCommentError>)
}
public enum VFCreateCommentError : Foundation.LocalizedError {
  case unknown
  case banned(banResponse: ViafouraSDK.BanResponse)
  case unauthorized
}
extension ViafouraSDK.VFCreateCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Constants {
}
extension ViafouraSDK.Constants {
  public struct AvatarColors {
    public static let colors: [UIKit.UIColor]
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
public struct VFArticleMetadata {
  public let url: Foundation.URL
  public let title: Swift.String
  public let subtitle: Swift.String
  public let thumbnailUrl: Foundation.URL
  public init(url: Foundation.URL, title: Swift.String, subtitle: Swift.String, thumbnailUrl: Foundation.URL)
  public init(url: Swift.String, title: Swift.String, subtitle: Swift.String, thumbnailUrl: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFAdView : UIKit.UIView {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ViafouraSDK {
  public static func initialize(siteUUID: Swift.String, siteDomain: Swift.String)
  public static func setLoggingEnabled(_ isLoggingEnabled: Swift.Bool)
  public static func isLoggingEnabled() -> Swift.Bool
  public static func auth() -> any ViafouraSDK.VFAuthenticationService
  public static func users() -> any ViafouraSDK.VFUsersService
  public static func comments() -> any ViafouraSDK.VFLiveCommentsService
  @objc deinit
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func getUserComments(sectionUUID: Foundation.UUID, userUUID: Foundation.UUID, limit: Swift.Int) async -> (Swift.Result<[ViafouraSDK.CommentResponse], ViafouraSDK.VFUserCommentsError>)
}
public enum VFUserCommentsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUserCommentsError, b: ViafouraSDK.VFUserCommentsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUserCommentsError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum EventType : Swift.String, Swift.Encodable {
  case AD_LOAD
  case AD_CODE
  case AD_VIEW
  case ATTEMPTED_ACTION
  case CHAT_PAGINATION
  case SORT_COMMENTS
  case INTERACTION
  case CONTAINER_LOAD
  case ENGAGE
  case LOGIN_FAILURE
  case LOGIN_SUCCESS
  case TRAY_TRIGGER_CLICK
  case LOAD_MORE_CLICK
  case LOAD_MORE_INITIAL_HEIGHT_CLICK
  case LOGOUT
  case PASSWORD_RESET
  case SIGNUP
  case CONVERSATIONS_BELL_CLICK
  case PAGE_VIEW
  case CONVERSATION_STARTER_CLICK
  case CONVERSATION_STARTER_VIEW
  case CONVERSATION_STARTER_LOAD
  case AB_TEST
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class ChatContent : Swift.Decodable {
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum VFUnlikeReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnlikeReviewError, b: ViafouraSDK.VFUnlikeReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnlikeReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct ChatContainerSettings : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFSortType {
  case newest
  case oldest
  case mostLiked
  case mostReplies
  public var rawValue: Swift.String {
    get
  }
  public static func == (a: ViafouraSDK.VFSortType, b: ViafouraSDK.VFSortType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func getComments(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, limit: Swift.Int, replyLimit: Swift.Int, startingFrom: Swift.String? = nil, filteredBy: Swift.String?, sortType: ViafouraSDK.VFSortType, syndicationKey: Swift.String? = nil, completion: @escaping ((Swift.Result<ViafouraSDK.CommentListResponse, ViafouraSDK.VFCommentListError>) -> Swift.Void))
  public func getComments(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, limit: Swift.Int, replyLimit: Swift.Int, startingFrom: Swift.String? = nil, filteredBy: Swift.String?, sortType: ViafouraSDK.VFSortType, syndicationKey: Swift.String? = nil) async throws -> (Swift.Result<ViafouraSDK.CommentListResponse, ViafouraSDK.VFCommentListError>)
}
public enum VFCommentListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCommentListError, b: ViafouraSDK.VFCommentListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCommentListError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUpdateUserError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUpdateUserError, b: ViafouraSDK.VFUpdateUserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUpdateUserError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VFEventEngageContainerTime : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFPollViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(contentContainerUUID: Foundation.UUID, loginDelegate: any ViafouraSDK.VFLoginDelegate, settings: ViafouraSDK.VFSettings) -> ViafouraSDK.VFPollViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping ViafouraSDK.VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setLayoutDelegate(layoutDelegate: any ViafouraSDK.VFLayoutDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ViafouraSDK.VFPollViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func editComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, articleMetadata: ViafouraSDK.VFArticleMetadata, content: Swift.String, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFEditCommentError>)
}
public enum VFEditCommentError : Foundation.LocalizedError {
  case unknown
  case unauthorized
  public static func == (a: ViafouraSDK.VFEditCommentError, b: ViafouraSDK.VFEditCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFEditCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveReviewsServiceImplementation {
  public func reviewCount(sectionUUID: Foundation.UUID? = nil, containerId: Swift.String, completion: @escaping ((Swift.Result<Swift.Int, ViafouraSDK.VFReviewCountError>) -> Swift.Void))
  public func reviewCount(sectionUUID: Foundation.UUID? = nil, containerId: Swift.String) async throws -> (Swift.Result<Swift.Int, ViafouraSDK.VFReviewCountError>)
}
public enum VFReviewCountError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFReviewCountError, b: ViafouraSDK.VFReviewCountError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFReviewCountError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFCreatePollError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCreatePollError, b: ViafouraSDK.VFCreatePollError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCreatePollError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct CommentsProfileResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFCreateReviewMediaError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCreateReviewMediaError, b: ViafouraSDK.VFCreateReviewMediaError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCreateReviewMediaError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFCustomBadgeView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func sizeToFit()
  @_Concurrency.MainActor @preconcurrency public func setupView(isProfile: Swift.Bool)
  @objc deinit
}
extension ViafouraSDK.VFAuthenticationServiceImplementation {
  public func loginRadiusLogin(token: Swift.String, provider: ViafouraSDK.VFSocialLoginProvider, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFLoginRadiusLoginError>) -> Swift.Void))
}
public enum VFLoginRadiusLoginError : Foundation.LocalizedError {
  case unknown
  case banned(banData: ViafouraSDK.ServerErrorData)
}
extension ViafouraSDK.VFLoginRadiusLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFReviewRepliesError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFReviewRepliesError, b: ViafouraSDK.VFReviewRepliesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFReviewRepliesError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFReviewModerationListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFReviewModerationListError, b: ViafouraSDK.VFReviewModerationListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFReviewModerationListError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFCommentsContainerType {
  case conversations
  case reviews
  public static func == (a: ViafouraSDK.VFCommentsContainerType, b: ViafouraSDK.VFCommentsContainerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFPreviewCommentsViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(containerId: Swift.String, containerType: ViafouraSDK.VFCommentsContainerType = .conversations, articleMetadata: ViafouraSDK.VFArticleMetadata, loginDelegate: any ViafouraSDK.VFLoginDelegate, settings: ViafouraSDK.VFSettings, paginationSize: Swift.Int = 10, defaultSort: ViafouraSDK.VFSortType = .newest, featuredTabThreshold: Swift.Int = 3, replySize: Swift.Int = 2, syndicationKey: Swift.String? = nil, sectionUUID: Foundation.UUID? = nil) -> ViafouraSDK.VFPreviewCommentsViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping ViafouraSDK.VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setAdDelegate(adDelegate: any ViafouraSDK.VFAdDelegate)
  @_Concurrency.MainActor @preconcurrency public func getContentScrollPosition(contentUUID: Foundation.UUID, completion: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any ViafouraSDK.VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency public func setAuthorsIds(authors: [Swift.String])
  @_Concurrency.MainActor @preconcurrency public func setLayoutDelegate(layoutDelegate: any ViafouraSDK.VFLayoutDelegate)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ViafouraSDK.VFPreviewCommentsViewController : ViafouraSDK.VFLocalAdDelegate {
  @_Concurrency.MainActor @preconcurrency public func generateAd(adPosition: Swift.Int) -> ViafouraSDK.VFAdView?
  @_Concurrency.MainActor @preconcurrency public func getAdInterval() -> Swift.Int
  @_Concurrency.MainActor @preconcurrency public func getFirstAdPosition() -> Swift.Int
}
extension ViafouraSDK.VFPreviewCommentsViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
extension ViafouraSDK.VFPreviewCommentsViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMove(toParent parent: UIKit.UIViewController?)
}
extension ViafouraSDK.VFPreviewCommentsViewController : ViafouraSDK.VFLayoutDelegate {
  @_Concurrency.MainActor @preconcurrency public func containerHeightUpdated(viewController: ViafouraSDK.VFUIViewController, height: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFFlagsView : UIKit.UIView {
  @objc deinit
}
public enum VFTrendingSortType : Swift.String {
  case comments
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFNewCommentsNotificationView : UIKit.UIView {
  @objc deinit
}
public enum VFCreateReviewReplyError : Foundation.LocalizedError {
  case unknown
  case unauthorized
  public static func == (a: ViafouraSDK.VFCreateReviewReplyError, b: ViafouraSDK.VFCreateReviewReplyError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCreateReviewReplyError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFAllCommentsView : UIKit.UIView {
  @objc deinit
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func undislikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUndislikeCommentError>)
}
public enum VFUndislikeCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUndislikeCommentError, b: ViafouraSDK.VFUndislikeCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUndislikeCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFSpamReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFSpamReviewError, b: ViafouraSDK.VFSpamReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFSpamReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFRemovePollError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFRemovePollError, b: ViafouraSDK.VFRemovePollError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFRemovePollError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func commentCount(sectionUUID: Foundation.UUID? = nil, containerId: Swift.String, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<Swift.Int, ViafouraSDK.VFCommentCountError>) -> Swift.Void))
  public func commentCount(sectionUUID: Foundation.UUID? = nil, containerId: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Int, ViafouraSDK.VFCommentCountError>)
}
public enum VFCommentCountError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCommentCountError, b: ViafouraSDK.VFCommentCountError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCommentCountError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFEnableReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFEnableReviewError, b: ViafouraSDK.VFEnableReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFEnableReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFRemoveEditorPickReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFRemoveEditorPickReviewError, b: ViafouraSDK.VFRemoveEditorPickReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFRemoveEditorPickReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFFollowView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func getComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil, completion: @escaping ((Swift.Result<ViafouraSDK.CommentResponse, ViafouraSDK.VFCommentError>) -> Swift.Void))
  public func getComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async throws -> (Swift.Result<ViafouraSDK.CommentResponse, ViafouraSDK.VFCommentError>)
}
public enum VFCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCommentError, b: ViafouraSDK.VFCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFContentRemovedView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFLoadingView : UIKit.UIActivityIndicatorView {
  @objc deinit
}
public enum VFTopicsSubscribedError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFTopicsSubscribedError, b: ViafouraSDK.VFTopicsSubscribedError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFTopicsSubscribedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFTabView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFScrollDownView : UIKit.UIView {
  @objc deinit
}
public enum VFCustomizableView {
  case postButton(button: ViafouraSDK.VFButton)
  case postTextView(textField: ViafouraSDK.VFTextView)
  case postCloseImage(image: ViafouraSDK.VFImageView)
  case postTitle(label: ViafouraSDK.VFLabel)
  case postHeaderDescription(label: ViafouraSDK.VFLabel)
  case postPlaceholderLabel(label: ViafouraSDK.VFLabel)
  case postImageSkeletonView(skeletonView: ViafouraSDK.VFSkeletonView)
  case postTitleSkeletonView(skeletonView: ViafouraSDK.VFSkeletonView)
  case postDescriptionSkeletonView(skeletonView: ViafouraSDK.VFSkeletonView)
  case postBackgroundView(view: UIKit.UIView)
  case profileNameLabel(label: ViafouraSDK.VFLabel)
  case profileLogoutLabel(label: ViafouraSDK.VFLabel)
  case profileCloseImage(image: ViafouraSDK.VFImageView)
  case profileLikesLabel(label: ViafouraSDK.VFLabel)
  case profileFollowersLabel(label: ViafouraSDK.VFLabel)
  case profileSegmentedControl(segmentedControl: ViafouraSDK.VFSegmentedControl)
  case profileBackgroundView(view: UIKit.UIView)
  case commentCellExpandRepliesLoading(loadingView: ViafouraSDK.VFLoadingView)
  case commentCellExpandRepliesImage(image: ViafouraSDK.VFImageView)
  case commentCellExpandRepliesLabel(label: ViafouraSDK.VFLabel)
  case commentCellDateLabel(label: ViafouraSDK.VFLabel)
  case commentCellNameLabel(label: ViafouraSDK.VFLabel)
  case commentCellContentLabel(label: ViafouraSDK.VFLabel)
  case commentCellOptionsButton(button: ViafouraSDK.VFButton)
  case commentCellLikeImage(image: ViafouraSDK.VFImageView)
  case commentCellLikeLabel(label: ViafouraSDK.VFLabel)
  case commentCellDislikeImage(image: ViafouraSDK.VFImageView)
  case commentCellFollowView(view: UIKit.UIView)
  case commentCellDislikeLabel(label: ViafouraSDK.VFLabel)
  case commentCellReplyLabel(label: ViafouraSDK.VFLabel)
  case commentCellReplyImage(image: ViafouraSDK.VFImageView)
  case commentCellUserImage(image: ViafouraSDK.VFImageView)
  case commentCellUserAvatar(view: UIKit.UIView)
  case commentCellCustomBadge(badge: ViafouraSDK.VFCustomBadgeView)
  case commentCellSeparator(separator: ViafouraSDK.VFSeparatorView)
  case previewEmptyCommentsView(emptyCommentsView: ViafouraSDK.VFEmptyCommentsView)
  case previewSeeMoreCommentsButton(button: ViafouraSDK.VFButton)
  case previewTitleLabel(label: ViafouraSDK.VFLabel)
  case previewPrivacyLabel(label: ViafouraSDK.VFLabel)
  case previewCommentPrompt(view: UIKit.UIView)
  case previewHeaderView(view: UIKit.UIView)
  case previewSortImage(image: ViafouraSDK.VFImageView)
  case previewAllComments(view: UIKit.UIView)
  case previewPoweredByView(poweredByView: ViafouraSDK.VFPoweredByViafouraView)
  case previewSkeletonView(skeletonView: UIKit.UIView)
  case previewFollowView(followView: ViafouraSDK.VFFollowView)
  case previewBackgroundView(view: UIKit.UIView)
  case trendingVerticalBackgroundView(view: UIKit.UIView)
  case trendingVerticalFullImage(image: ViafouraSDK.VFImageView)
  case trendingVerticalFullTitle(label: ViafouraSDK.VFLabel)
  case trendingVerticalFullCount(label: ViafouraSDK.VFLabel)
  case trendingVerticalCondensedTitle(label: ViafouraSDK.VFLabel)
  case trendingVerticalCondensedCount(label: ViafouraSDK.VFLabel)
  case trendingCarouselTitle(label: ViafouraSDK.VFLabel)
  case trendingCarouselImage(image: ViafouraSDK.VFImageView)
  case trendingCarouselCount(label: ViafouraSDK.VFLabel)
  case trendingCarouselBackgroundView(view: UIKit.UIView)
  case bottomPickerView(view: UIKit.UIView)
  case bottomPickerTitle(label: ViafouraSDK.VFLabel)
  case bottomPickerTitleLabel(label: ViafouraSDK.VFLabel)
  case bottomPickerLabel(label: ViafouraSDK.VFLabel, isActive: Swift.Bool)
  case bottomPickerSeparator(separatorView: ViafouraSDK.VFSeparatorView)
  case chatCellContentLabel(label: ViafouraSDK.VFLabel)
  case chatCellDateLabel(label: ViafouraSDK.VFLabel)
  case chatCellUserNameLabel(label: ViafouraSDK.VFLabel)
  case chatPostView(view: UIKit.UIView)
  case chatPostImage(image: ViafouraSDK.VFImageView)
  case chatPostLoading(loadingView: ViafouraSDK.VFLoadingView)
  case chatTextView(textView: ViafouraSDK.VFTextView)
  case chatBackgroundView(backgroundView: UIKit.UIView)
  case chatLoading(loadingView: ViafouraSDK.VFLoadingView)
  case chatLoadingMore(loadingView: ViafouraSDK.VFLoadingView)
  case chatEmptyView(emptyView: ViafouraSDK.VFEmptyChatsView)
  case notificationBellText(label: ViafouraSDK.VFLabel)
  case notificationBellIcon(icon: ViafouraSDK.VFImageView)
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func unpinComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUnpinCommentError>)
}
public enum VFUnpinCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnpinCommentError, b: ViafouraSDK.VFUnpinCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnpinCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func getCommentsReplies(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, limit: Swift.Int, startingFrom: Swift.String? = nil, syndicationKey: Swift.String? = nil, completion: @escaping ((Swift.Result<[ViafouraSDK.CommentResponse], ViafouraSDK.VFCommentRepliesError>) -> Swift.Void))
  public func getCommentsReplies(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, limit: Swift.Int, startingFrom: Swift.String? = nil, syndicationKey: Swift.String? = nil) async throws -> (Swift.Result<[ViafouraSDK.CommentResponse], ViafouraSDK.VFCommentRepliesError>)
}
public enum VFCommentRepliesError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCommentRepliesError, b: ViafouraSDK.VFCommentRepliesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCommentRepliesError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class VFNotificationsServiceImplementation {
  @objc deinit
}
public enum VFReplyChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFReplyChatError, b: ViafouraSDK.VFReplyChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFReplyChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFCommentModerationListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCommentModerationListError, b: ViafouraSDK.VFCommentModerationListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCommentModerationListError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEmptyCommentsView : UIKit.UIView {
  @objc deinit
}
extension ViafouraSDK.AnalyticsServiceImplementation {
  public func logTyping(contentContainerUUID: Foundation.UUID, threadUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?)
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func trendingComments(sectionUUID: Foundation.UUID, limit: Swift.Int, contentContainerWindowDays: Swift.Int?, contentContainerWindowHours: Swift.Int, sortedBy: ViafouraSDK.VFTrendingSortType) async -> (Swift.Result<[ViafouraSDK.TrendingResultResponse], ViafouraSDK.VFTrendingError>)
}
public enum VFTrendingError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFTrendingError, b: ViafouraSDK.VFTrendingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFTrendingError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func createMedia(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, imageData: Foundation.Data) async -> (Swift.Result<ViafouraSDK.CreateCommentMediaResponse, ViafouraSDK.VFCreateCommentMediaError>)
}
public enum VFCreateCommentMediaError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCreateCommentMediaError, b: ViafouraSDK.VFCreateCommentMediaError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCreateCommentMediaError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFDisabledView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFSwitch : UIKit.UISwitch {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFNotificationBellView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var isElevationEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isBackgroundColorEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public init(settings: ViafouraSDK.VFSettings, loginDelegate: any ViafouraSDK.VFLoginDelegate, onBellClicked: @escaping ((Foundation.UUID) -> Swift.Void))
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any ViafouraSDK.VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFProfileViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(userUUID: Foundation.UUID, presentationType: ViafouraSDK.VFProfilePresentationType, loginDelegate: any ViafouraSDK.VFLoginDelegate, settings: ViafouraSDK.VFSettings) -> ViafouraSDK.VFProfileViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping ViafouraSDK.VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any ViafouraSDK.VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ViafouraSDK.VFProfileViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
extension ViafouraSDK.VFProfileViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFSeparatorView : UIKit.UIView {
  @objc deinit
}
public enum VFChatContainerError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFChatContainerError, b: ViafouraSDK.VFChatContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFChatContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class TrendingContent {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommentContent {
  @objc deinit
}
public enum VFReviewContainerError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFReviewContainerError, b: ViafouraSDK.VFReviewContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFReviewContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class ViewChatReplyViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(originalChatContent: ViafouraSDK.ChatContent, loginDelegate: any ViafouraSDK.VFLoginDelegate, settings: ViafouraSDK.VFSettings) -> ViafouraSDK.ViewChatReplyViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct BanResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFUserReviewsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUserReviewsError, b: ViafouraSDK.VFUserReviewsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUserReviewsError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFDeleteReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFDeleteReviewError, b: ViafouraSDK.VFDeleteReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFDeleteReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class ChatReplyViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(originalChatContent: ViafouraSDK.ChatContent, containerSettings: ViafouraSDK.ChatContainerSettings?, containerId: Swift.String, articleMetadata: ViafouraSDK.VFArticleMetadata, loginDelegate: any ViafouraSDK.VFLoginDelegate, settings: ViafouraSDK.VFSettings) -> ViafouraSDK.ChatReplyViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ViafouraSDK.ChatReplyViewController : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class TopCommentsDisclaimerViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(settings: ViafouraSDK.VFSettings) -> ViafouraSDK.TopCommentsDisclaimerViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum VFUpdateReviewsContainerSettingsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUpdateReviewsContainerSettingsError, b: ViafouraSDK.VFUpdateReviewsContainerSettingsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUpdateReviewsContainerSettingsError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFAuthenticationServiceImplementation {
  public func cookieLogin(token: Swift.String, completion: @escaping ((Swift.Result<ViafouraSDK.VFCookieLoginData, ViafouraSDK.VFCookieLoginError>) -> Swift.Void))
}
public struct VFCookieLoginData {
}
public enum VFCookieLoginError : Foundation.LocalizedError {
  case unknown
  case banned(banData: ViafouraSDK.ServerErrorData)
}
extension ViafouraSDK.VFCookieLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFPinReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFPinReviewError, b: ViafouraSDK.VFPinReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFPinReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFReviewListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFReviewListError, b: ViafouraSDK.VFReviewListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFReviewListError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFSubscribeTopicError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFSubscribeTopicError, b: ViafouraSDK.VFSubscribeTopicError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFSubscribeTopicError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnpinReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnpinReviewError, b: ViafouraSDK.VFUnpinReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnpinReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct MuteUserResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrendingResultResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFCreateChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFCreateChatError, b: ViafouraSDK.VFCreateChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFCreateChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFEditReviewError : Foundation.LocalizedError {
  case unknown
  case unauthorized
  public static func == (a: ViafouraSDK.VFEditReviewError, b: ViafouraSDK.VFEditReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFEditReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VFFonts : Swift.Equatable {
  public static let fontBoldDefault: UIKit.UIFont
  public static let fontLightDefault: UIKit.UIFont
  public static let fontMediumDefault: UIKit.UIFont
  public static let fontRegularDefault: UIKit.UIFont
  public static let fontSemiboldDefault: UIKit.UIFont
  public var fontRegular: UIKit.UIFont
  public var fontMedium: UIKit.UIFont
  public var fontBold: UIKit.UIFont
  public var fontLight: UIKit.UIFont
  public var fontSemibold: UIKit.UIFont
  public init(fontLight: UIKit.UIFont = fontLightDefault, fontRegular: UIKit.UIFont = fontRegularDefault, fontMedium: UIKit.UIFont = fontMediumDefault, fontSemibold: UIKit.UIFont = fontSemiboldDefault, fontBold: UIKit.UIFont = fontBoldDefault)
  public static func == (a: ViafouraSDK.VFFonts, b: ViafouraSDK.VFFonts) -> Swift.Bool
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func removeEditorPickComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFRemoveEditorPickCommentError>)
}
public enum VFRemoveEditorPickCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFRemoveEditorPickCommentError, b: ViafouraSDK.VFRemoveEditorPickCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFRemoveEditorPickCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFPoweredByViafouraView : UIKit.UIView {
  @objc deinit
}
public enum VFReviewsProfileError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFReviewsProfileError, b: ViafouraSDK.VFReviewsProfileError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFReviewsProfileError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol StoryboardCreateable : UIKit.UIViewController {
  static var storyboardName: Swift.String { get }
}
extension ViafouraSDK.StoryboardCreateable {
  public static func new() -> Self?
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func spamComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFSpamCommentError>)
}
public enum VFSpamCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFSpamCommentError, b: ViafouraSDK.VFSpamCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFSpamCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFPinnedView : UIKit.UIView {
  @objc deinit
}
public enum VFTrendingReviewsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFTrendingReviewsError, b: ViafouraSDK.VFTrendingReviewsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFTrendingReviewsError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFDisableReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFDisableReviewError, b: ViafouraSDK.VFDisableReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFDisableReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnsubscribeTopicError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnsubscribeTopicError, b: ViafouraSDK.VFUnsubscribeTopicError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnsubscribeTopicError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func pinComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFPinCommentError>)
}
public enum VFPinCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFPinCommentError, b: ViafouraSDK.VFPinCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFPinCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnlikeChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnlikeChatError, b: ViafouraSDK.VFUnlikeChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnlikeChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFReviewError, b: ViafouraSDK.VFReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VFAccessibilityIdentifiers {
  public static let previewCommentsPromptView: Swift.String
  public static let postButton: Swift.String
  public static let postTextField: Swift.String
}
public protocol VFCustomUIDelegate : AnyObject {
  func customizeView(theme: ViafouraSDK.VFTheme, view: ViafouraSDK.VFCustomizableView)
}
public enum VFEditorPickReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFEditorPickReviewError, b: ViafouraSDK.VFEditorPickReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFEditorPickReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VFSettings : Swift.Equatable {
  public let fonts: ViafouraSDK.VFFonts
  public var colors: ViafouraSDK.VFColors
  public init(colors: ViafouraSDK.VFColors, fonts: ViafouraSDK.VFFonts = VFFonts())
  public static func == (lhs: ViafouraSDK.VFSettings, rhs: ViafouraSDK.VFSettings) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SingleChatViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFNewCommentViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static func new(newCommentActionType: ViafouraSDK.VFNewCommentActionType, containerType: ViafouraSDK.VFCommentsContainerType = .conversations, containerId: Swift.String, articleMetadata: ViafouraSDK.VFArticleMetadata, loginDelegate: any ViafouraSDK.VFLoginDelegate, settings: ViafouraSDK.VFSettings, syndicationKey: Swift.String? = nil, sectionUUID: Foundation.UUID? = nil) -> ViafouraSDK.VFNewCommentViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping ViafouraSDK.VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any ViafouraSDK.VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canResignFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ViafouraSDK.VFNewCommentViewController : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
extension ViafouraSDK.VFNewCommentViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
public enum WidgetType : Swift.String, Swift.Encodable {
  case LIVE_BLOG
  case CONTENT_RECIRCULATION
  case STANDALONE_AD
  case CONVERSATION_STARTER
  case LIVECHAT
  case SHAREBAR
  case LIVE_REVIEWS
  case LIVE_CONVERSATIONS
  case TRAY_TRIGGER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ViafouraSDK.VFAuthenticationServiceImplementation {
  public func resetPassword(email: Swift.String, completion: @escaping ((Swift.Result<Swift.Bool, ViafouraSDK.VFPasswordResetError>) -> Swift.Void))
}
public enum VFPasswordResetError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFPasswordResetError, b: ViafouraSDK.VFPasswordResetError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFPasswordResetError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFImageView : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol VFUsersService {
  func isUserMuted(userId: Swift.String, mutedUserUUID: Foundation.UUID) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUserMutesError>)
  func getUserMutes(userId: Swift.String) async -> (Swift.Result<ViafouraSDK.UserMutesResponse, ViafouraSDK.VFUserMutesError>)
  func unmuteUser(userId: Swift.String) async -> (Swift.Result<ViafouraSDK.UnmuteUserResponse, ViafouraSDK.VFUnmuteUserError>)
  func muteUser(userId: Swift.String) async -> (Swift.Result<ViafouraSDK.MuteUserResponse, ViafouraSDK.VFMuteUserError>)
  func getUsersInfo(usersUUID: [(Foundation.UUID, Swift.String?)]) async -> (Swift.Result<[ViafouraSDK.UserResponse?], ViafouraSDK.VFUserInfoError>)
  func getUserInfo(userUUID: Foundation.UUID, completion: @escaping ((Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFUserInfoError>) -> Swift.Void))
  func getUserInfo(userUUID: Foundation.UUID) async -> (Swift.Result<ViafouraSDK.UserResponse, ViafouraSDK.VFUserInfoError>)
  func updateUserAvatar(imageData: Foundation.Data) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUpdateUserAvatarError>)
  func updateUser(email: Swift.String?, name: Swift.String?, password: Swift.String?, newPassword: Swift.String?, emailNoticeFrequency: Swift.String?) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUpdateUserError>)
}
public enum VFUserInfoError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUserInfoError, b: ViafouraSDK.VFUserInfoError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUserInfoError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFLiveView : UIKit.UIView {
  @objc deinit
}
public enum VFReviewContainerSignatureError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFReviewContainerSignatureError, b: ViafouraSDK.VFReviewContainerSignatureError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFReviewContainerSignatureError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUpdateChatContainerError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUpdateChatContainerError, b: ViafouraSDK.VFUpdateChatContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUpdateChatContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func disableComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFDisableCommentError>)
}
public enum VFDisableCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFDisableCommentError, b: ViafouraSDK.VFDisableCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFDisableCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFSocialLoginProvider : Swift.String, Swift.Encodable, Swift.Decodable {
  case google
  case twitter
  case linkedin
  case apple
  case viafouraDefinedCookie
  case facebook
  case yahoo
  case windowslive
  case aol
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFTextView : UIKit.UITextView {
  @available(iOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFTrustedView : UIKit.UIView {
  @objc deinit
}
public enum EventLoginType : Swift.String, Swift.Encodable {
  case cookie
  case oauth
  case loginradius
  case viafoura
  case loginradius_social
  case embedded_loginradius
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func unspamComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFUnspamCommentError>)
}
public enum VFUnspamCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFUnspamCommentError, b: ViafouraSDK.VFUnspamCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFUnspamCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension ViafouraSDK.VFLiveCommentsServiceImplementation {
  public func deleteComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, ViafouraSDK.VFDeleteCommentError>)
}
public enum VFDeleteCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: ViafouraSDK.VFDeleteCommentError, b: ViafouraSDK.VFDeleteCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ViafouraSDK.VFDeleteCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFLiveChatViewController : ViafouraSDK.VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(containerId: Swift.String, articleMetadata: ViafouraSDK.VFArticleMetadata, loginDelegate: any ViafouraSDK.VFLoginDelegate, settings: ViafouraSDK.VFSettings, paginationSize: Swift.Int = 10, sectionUUID: Foundation.UUID? = nil) -> ViafouraSDK.VFLiveChatViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: ViafouraSDK.VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping ViafouraSDK.VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any ViafouraSDK.VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ViafouraSDK.VFLiveChatViewController : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
@_inheritsConvenienceInitializers @objc(EventLog) public class EventLog : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ViafouraSDK.EventLog {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ViafouraSDK.EventLog>
  @objc @NSManaged dynamic public var createdAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var jsonValue: Swift.String? {
    @objc get
    @objc set
  }
}
extension ViafouraSDK.EventLog : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension ViafouraSDK.VFDislikeChatError : Swift.Equatable {}
extension ViafouraSDK.VFDislikeChatError : Swift.Hashable {}
extension ViafouraSDK.VFTopCommentError : Swift.Equatable {}
extension ViafouraSDK.VFTopCommentError : Swift.Hashable {}
extension ViafouraSDK.VFUnflagCommentError : Swift.Equatable {}
extension ViafouraSDK.VFUnflagCommentError : Swift.Hashable {}
extension ViafouraSDK.VFFlagCommentError : Swift.Equatable {}
extension ViafouraSDK.VFFlagCommentError : Swift.Hashable {}
extension ViafouraSDK.VFLikeReviewError : Swift.Equatable {}
extension ViafouraSDK.VFLikeReviewError : Swift.Hashable {}
extension ViafouraSDK.VFChatListError : Swift.Equatable {}
extension ViafouraSDK.VFChatListError : Swift.Hashable {}
extension ViafouraSDK.VFUpdateUserAvatarError : Swift.Equatable {}
extension ViafouraSDK.VFUpdateUserAvatarError : Swift.Hashable {}
extension ViafouraSDK.VFTheme : Swift.Equatable {}
extension ViafouraSDK.VFTheme : Swift.Hashable {}
extension ViafouraSDK.VFAuthPromptType : Swift.Equatable {}
extension ViafouraSDK.VFAuthPromptType : Swift.Hashable {}
extension ViafouraSDK.VFProfilePresentationType : Swift.Equatable {}
extension ViafouraSDK.VFProfilePresentationType : Swift.Hashable {}
extension ViafouraSDK.VFSingleChatError : Swift.Equatable {}
extension ViafouraSDK.VFSingleChatError : Swift.Hashable {}
extension ViafouraSDK.VFClosePollError : Swift.Equatable {}
extension ViafouraSDK.VFClosePollError : Swift.Hashable {}
extension ViafouraSDK.VFCreateReviewError : Swift.Equatable {}
extension ViafouraSDK.VFCreateReviewError : Swift.Hashable {}
extension ViafouraSDK.VFDislikeCommentError : Swift.Equatable {}
extension ViafouraSDK.VFDislikeCommentError : Swift.Hashable {}
extension ViafouraSDK.VFCommentContainerSignatureError : Swift.Equatable {}
extension ViafouraSDK.VFCommentContainerSignatureError : Swift.Hashable {}
extension ViafouraSDK.VFChatSelectionError : Swift.Equatable {}
extension ViafouraSDK.VFChatSelectionError : Swift.Hashable {}
extension ViafouraSDK.VFEnableChatError : Swift.Equatable {}
extension ViafouraSDK.VFEnableChatError : Swift.Hashable {}
extension ViafouraSDK.VFChatModerationListError : Swift.Equatable {}
extension ViafouraSDK.VFChatModerationListError : Swift.Hashable {}
extension ViafouraSDK.VFLikeCommentError : Swift.Equatable {}
extension ViafouraSDK.VFLikeCommentError : Swift.Hashable {}
extension ViafouraSDK.VFEnableCommentError : Swift.Equatable {}
extension ViafouraSDK.VFEnableCommentError : Swift.Hashable {}
extension ViafouraSDK.EventAttemptedAction : Swift.Equatable {}
extension ViafouraSDK.EventAttemptedAction : Swift.Hashable {}
extension ViafouraSDK.EventAttemptedAction : Swift.RawRepresentable {}
extension ViafouraSDK.CommentNodeType : Swift.Equatable {}
extension ViafouraSDK.CommentNodeType : Swift.Hashable {}
extension ViafouraSDK.VFUpdateCommentsContainerSettingsError : Swift.Equatable {}
extension ViafouraSDK.VFUpdateCommentsContainerSettingsError : Swift.Hashable {}
extension ViafouraSDK.VFDisableChatError : Swift.Equatable {}
extension ViafouraSDK.VFDisableChatError : Swift.Hashable {}
extension ViafouraSDK.VFUnspamReviewError : Swift.Equatable {}
extension ViafouraSDK.VFUnspamReviewError : Swift.Hashable {}
extension ViafouraSDK.VFUnflagChatError : Swift.Equatable {}
extension ViafouraSDK.VFUnflagChatError : Swift.Hashable {}
extension ViafouraSDK.VFUndislikeReviewError : Swift.Equatable {}
extension ViafouraSDK.VFUndislikeReviewError : Swift.Hashable {}
extension ViafouraSDK.VFLikeChatError : Swift.Equatable {}
extension ViafouraSDK.VFLikeChatError : Swift.Hashable {}
extension ViafouraSDK.VFRemoveTopCommentError : Swift.Equatable {}
extension ViafouraSDK.VFRemoveTopCommentError : Swift.Hashable {}
extension ViafouraSDK.VFVotePollError : Swift.Equatable {}
extension ViafouraSDK.VFVotePollError : Swift.Hashable {}
extension ViafouraSDK.VFCommentsProfileError : Swift.Equatable {}
extension ViafouraSDK.VFCommentsProfileError : Swift.Hashable {}
extension ViafouraSDK.VFPollContainerError : Swift.Equatable {}
extension ViafouraSDK.VFPollContainerError : Swift.Hashable {}
extension ViafouraSDK.VFFlagReviewError : Swift.Equatable {}
extension ViafouraSDK.VFFlagReviewError : Swift.Hashable {}
extension ViafouraSDK.VFFilterType : Swift.Equatable {}
extension ViafouraSDK.VFFilterType : Swift.Hashable {}
extension ViafouraSDK.VFUndislikeChatError : Swift.Equatable {}
extension ViafouraSDK.VFUndislikeChatError : Swift.Hashable {}
extension ViafouraSDK.VFDislikeReviewError : Swift.Equatable {}
extension ViafouraSDK.VFDislikeReviewError : Swift.Hashable {}
extension ViafouraSDK.VFEditorPickCommentError : Swift.Equatable {}
extension ViafouraSDK.VFEditorPickCommentError : Swift.Hashable {}
extension ViafouraSDK.VFSignUpError : Swift.Equatable {}
extension ViafouraSDK.VFSignUpError : Swift.Hashable {}
extension ViafouraSDK.VFCommentContainerError : Swift.Equatable {}
extension ViafouraSDK.VFCommentContainerError : Swift.Hashable {}
extension ViafouraSDK.VFUnlikeCommentError : Swift.Equatable {}
extension ViafouraSDK.VFUnlikeCommentError : Swift.Hashable {}
extension ViafouraSDK.VFUserMutesError : Swift.Equatable {}
extension ViafouraSDK.VFUserMutesError : Swift.Hashable {}
extension ViafouraSDK.VFUnmuteUserError : Swift.Equatable {}
extension ViafouraSDK.VFUnmuteUserError : Swift.Hashable {}
extension ViafouraSDK.VFMuteUserError : Swift.Equatable {}
extension ViafouraSDK.VFMuteUserError : Swift.Hashable {}
extension ViafouraSDK.VFFlagChatError : Swift.Equatable {}
extension ViafouraSDK.VFFlagChatError : Swift.Hashable {}
extension ViafouraSDK.VFUnflagReviewError : Swift.Equatable {}
extension ViafouraSDK.VFUnflagReviewError : Swift.Hashable {}
extension ViafouraSDK.VFDeleteChatError : Swift.Equatable {}
extension ViafouraSDK.VFDeleteChatError : Swift.Hashable {}
extension ViafouraSDK.VFUserCommentsError : Swift.Equatable {}
extension ViafouraSDK.VFUserCommentsError : Swift.Hashable {}
extension ViafouraSDK.EventType : Swift.Equatable {}
extension ViafouraSDK.EventType : Swift.Hashable {}
extension ViafouraSDK.EventType : Swift.RawRepresentable {}
extension ViafouraSDK.VFUnlikeReviewError : Swift.Equatable {}
extension ViafouraSDK.VFUnlikeReviewError : Swift.Hashable {}
extension ViafouraSDK.VFSortType : Swift.Equatable {}
extension ViafouraSDK.VFSortType : Swift.Hashable {}
extension ViafouraSDK.VFCommentListError : Swift.Equatable {}
extension ViafouraSDK.VFCommentListError : Swift.Hashable {}
extension ViafouraSDK.VFUpdateUserError : Swift.Equatable {}
extension ViafouraSDK.VFUpdateUserError : Swift.Hashable {}
extension ViafouraSDK.VFEditCommentError : Swift.Equatable {}
extension ViafouraSDK.VFEditCommentError : Swift.Hashable {}
extension ViafouraSDK.VFReviewCountError : Swift.Equatable {}
extension ViafouraSDK.VFReviewCountError : Swift.Hashable {}
extension ViafouraSDK.VFCreatePollError : Swift.Equatable {}
extension ViafouraSDK.VFCreatePollError : Swift.Hashable {}
extension ViafouraSDK.VFCreateReviewMediaError : Swift.Equatable {}
extension ViafouraSDK.VFCreateReviewMediaError : Swift.Hashable {}
extension ViafouraSDK.VFReviewRepliesError : Swift.Equatable {}
extension ViafouraSDK.VFReviewRepliesError : Swift.Hashable {}
extension ViafouraSDK.VFReviewModerationListError : Swift.Equatable {}
extension ViafouraSDK.VFReviewModerationListError : Swift.Hashable {}
extension ViafouraSDK.VFCommentsContainerType : Swift.Equatable {}
extension ViafouraSDK.VFCommentsContainerType : Swift.Hashable {}
extension ViafouraSDK.VFTrendingSortType : Swift.Equatable {}
extension ViafouraSDK.VFTrendingSortType : Swift.Hashable {}
extension ViafouraSDK.VFTrendingSortType : Swift.RawRepresentable {}
extension ViafouraSDK.VFCreateReviewReplyError : Swift.Equatable {}
extension ViafouraSDK.VFCreateReviewReplyError : Swift.Hashable {}
extension ViafouraSDK.VFUndislikeCommentError : Swift.Equatable {}
extension ViafouraSDK.VFUndislikeCommentError : Swift.Hashable {}
extension ViafouraSDK.VFSpamReviewError : Swift.Equatable {}
extension ViafouraSDK.VFSpamReviewError : Swift.Hashable {}
extension ViafouraSDK.VFRemovePollError : Swift.Equatable {}
extension ViafouraSDK.VFRemovePollError : Swift.Hashable {}
extension ViafouraSDK.VFCommentCountError : Swift.Equatable {}
extension ViafouraSDK.VFCommentCountError : Swift.Hashable {}
extension ViafouraSDK.VFEnableReviewError : Swift.Equatable {}
extension ViafouraSDK.VFEnableReviewError : Swift.Hashable {}
extension ViafouraSDK.VFRemoveEditorPickReviewError : Swift.Equatable {}
extension ViafouraSDK.VFRemoveEditorPickReviewError : Swift.Hashable {}
extension ViafouraSDK.VFCommentError : Swift.Equatable {}
extension ViafouraSDK.VFCommentError : Swift.Hashable {}
extension ViafouraSDK.VFTopicsSubscribedError : Swift.Equatable {}
extension ViafouraSDK.VFTopicsSubscribedError : Swift.Hashable {}
extension ViafouraSDK.VFUnpinCommentError : Swift.Equatable {}
extension ViafouraSDK.VFUnpinCommentError : Swift.Hashable {}
extension ViafouraSDK.VFCommentRepliesError : Swift.Equatable {}
extension ViafouraSDK.VFCommentRepliesError : Swift.Hashable {}
extension ViafouraSDK.VFReplyChatError : Swift.Equatable {}
extension ViafouraSDK.VFReplyChatError : Swift.Hashable {}
extension ViafouraSDK.VFCommentModerationListError : Swift.Equatable {}
extension ViafouraSDK.VFCommentModerationListError : Swift.Hashable {}
extension ViafouraSDK.VFTrendingError : Swift.Equatable {}
extension ViafouraSDK.VFTrendingError : Swift.Hashable {}
extension ViafouraSDK.VFCreateCommentMediaError : Swift.Equatable {}
extension ViafouraSDK.VFCreateCommentMediaError : Swift.Hashable {}
extension ViafouraSDK.VFChatContainerError : Swift.Equatable {}
extension ViafouraSDK.VFChatContainerError : Swift.Hashable {}
extension ViafouraSDK.VFReviewContainerError : Swift.Equatable {}
extension ViafouraSDK.VFReviewContainerError : Swift.Hashable {}
extension ViafouraSDK.VFUserReviewsError : Swift.Equatable {}
extension ViafouraSDK.VFUserReviewsError : Swift.Hashable {}
extension ViafouraSDK.VFDeleteReviewError : Swift.Equatable {}
extension ViafouraSDK.VFDeleteReviewError : Swift.Hashable {}
extension ViafouraSDK.VFUpdateReviewsContainerSettingsError : Swift.Equatable {}
extension ViafouraSDK.VFUpdateReviewsContainerSettingsError : Swift.Hashable {}
extension ViafouraSDK.VFPinReviewError : Swift.Equatable {}
extension ViafouraSDK.VFPinReviewError : Swift.Hashable {}
extension ViafouraSDK.VFReviewListError : Swift.Equatable {}
extension ViafouraSDK.VFReviewListError : Swift.Hashable {}
extension ViafouraSDK.VFSubscribeTopicError : Swift.Equatable {}
extension ViafouraSDK.VFSubscribeTopicError : Swift.Hashable {}
extension ViafouraSDK.VFUnpinReviewError : Swift.Equatable {}
extension ViafouraSDK.VFUnpinReviewError : Swift.Hashable {}
extension ViafouraSDK.VFCreateChatError : Swift.Equatable {}
extension ViafouraSDK.VFCreateChatError : Swift.Hashable {}
extension ViafouraSDK.VFEditReviewError : Swift.Equatable {}
extension ViafouraSDK.VFEditReviewError : Swift.Hashable {}
extension ViafouraSDK.VFRemoveEditorPickCommentError : Swift.Equatable {}
extension ViafouraSDK.VFRemoveEditorPickCommentError : Swift.Hashable {}
extension ViafouraSDK.VFReviewsProfileError : Swift.Equatable {}
extension ViafouraSDK.VFReviewsProfileError : Swift.Hashable {}
extension ViafouraSDK.VFSpamCommentError : Swift.Equatable {}
extension ViafouraSDK.VFSpamCommentError : Swift.Hashable {}
extension ViafouraSDK.VFTrendingReviewsError : Swift.Equatable {}
extension ViafouraSDK.VFTrendingReviewsError : Swift.Hashable {}
extension ViafouraSDK.VFDisableReviewError : Swift.Equatable {}
extension ViafouraSDK.VFDisableReviewError : Swift.Hashable {}
extension ViafouraSDK.VFUnsubscribeTopicError : Swift.Equatable {}
extension ViafouraSDK.VFUnsubscribeTopicError : Swift.Hashable {}
extension ViafouraSDK.VFPinCommentError : Swift.Equatable {}
extension ViafouraSDK.VFPinCommentError : Swift.Hashable {}
extension ViafouraSDK.VFUnlikeChatError : Swift.Equatable {}
extension ViafouraSDK.VFUnlikeChatError : Swift.Hashable {}
extension ViafouraSDK.VFReviewError : Swift.Equatable {}
extension ViafouraSDK.VFReviewError : Swift.Hashable {}
extension ViafouraSDK.VFEditorPickReviewError : Swift.Equatable {}
extension ViafouraSDK.VFEditorPickReviewError : Swift.Hashable {}
extension ViafouraSDK.WidgetType : Swift.Equatable {}
extension ViafouraSDK.WidgetType : Swift.Hashable {}
extension ViafouraSDK.WidgetType : Swift.RawRepresentable {}
extension ViafouraSDK.VFPasswordResetError : Swift.Equatable {}
extension ViafouraSDK.VFPasswordResetError : Swift.Hashable {}
extension ViafouraSDK.VFUserInfoError : Swift.Equatable {}
extension ViafouraSDK.VFUserInfoError : Swift.Hashable {}
extension ViafouraSDK.VFReviewContainerSignatureError : Swift.Equatable {}
extension ViafouraSDK.VFReviewContainerSignatureError : Swift.Hashable {}
extension ViafouraSDK.VFUpdateChatContainerError : Swift.Equatable {}
extension ViafouraSDK.VFUpdateChatContainerError : Swift.Hashable {}
extension ViafouraSDK.VFDisableCommentError : Swift.Equatable {}
extension ViafouraSDK.VFDisableCommentError : Swift.Hashable {}
extension ViafouraSDK.VFSocialLoginProvider : Swift.Equatable {}
extension ViafouraSDK.VFSocialLoginProvider : Swift.Hashable {}
extension ViafouraSDK.VFSocialLoginProvider : Swift.RawRepresentable {}
extension ViafouraSDK.EventLoginType : Swift.Equatable {}
extension ViafouraSDK.EventLoginType : Swift.Hashable {}
extension ViafouraSDK.EventLoginType : Swift.RawRepresentable {}
extension ViafouraSDK.VFUnspamCommentError : Swift.Equatable {}
extension ViafouraSDK.VFUnspamCommentError : Swift.Hashable {}
extension ViafouraSDK.VFDeleteCommentError : Swift.Equatable {}
extension ViafouraSDK.VFDeleteCommentError : Swift.Hashable {}
