// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios15.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ViafouraSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AdSupport
import AppTrackingTransparency
import CoreLocation
import DeveloperToolsSupport
import Foundation
import Network
import SafariServices
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFModeratorView : UIKit.UIView {
  @objc deinit
}
public struct CommentError : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFDislikeChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFDislikeChatError, b: VFDislikeChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFDislikeChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func makeTopComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFTopCommentError>)
}
public enum VFTopCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFTopCommentError, b: VFTopCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFTopCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEditorPicksView : UIKit.UIView {
  @objc deinit
}
public struct VFColors : Swift.Equatable {
  public init(colorPrimary: UIKit.UIColor = VFDefaultColors.colorPrimaryDefault(), colorPrimaryLight: UIKit.UIColor = VFDefaultColors.colorPrimaryLightDefault(), colorBackground: UIKit.UIColor = VFDefaultColors.colorBackgroundDefault(), colorSeparator: UIKit.UIColor = VFDefaultColors.colorSeparatorDefault(), colorIcons: UIKit.UIColor = VFDefaultColors.colorIcons(), colorAvatars: [UIKit.UIColor] = Constants.AvatarColors.colors)
  public static func == (a: VFColors, b: VFColors) -> Swift.Bool
}
public struct VFDefaultColors {
  public static func colorBackgroundDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorText1Default(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorText2Default(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorSeparatorDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func skeletonGradientBackgroundColor(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func skeletonGradientHightlightColor(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorErrorDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorWarningDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorStarDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorEditorPicksDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorThreadingLines(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorChatBubbleDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorPinnedDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorPinnedBadgeDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorPrimaryDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorPrimaryLightDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorBorder1Default(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorBorder2Default(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorAuthorBadgeDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorModeratorBadgeDefault(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorNewCommentText(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorIcons(_ forTheme: VFTheme = .light) -> UIKit.UIColor
  public static func colorInputBox(_ forTheme: VFTheme = .light) -> UIKit.UIColor
}
public struct CommentContainerByIdResponse : Swift.Decodable {
  public let content_container_uuid: Foundation.UUID
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserMutesResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFAwaitingModerationView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEmptyModerationView : UIKit.UIView {
  @objc deinit
}
extension VFLiveCommentsServiceImplementation {
  public func createCommentReply(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, articleMetadata: VFArticleMetadata, content: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Foundation.UUID, VFCreateCommentReplyError>)
}
public enum VFCreateCommentReplyError : Foundation.LocalizedError {
  case unknown
  case banned(banResponse: BanResponse)
  case unauthorized
}
extension VFCreateCommentReplyError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFTextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VFAuthenticationServiceImplementation {
  public func getUserLoginStatus(completion: @escaping ((Swift.Result<VFLoginStatus, Swift.Never>) -> Swift.Void))
  public func getUserLoginStatus() async -> (Swift.Result<VFLoginStatus, Swift.Never>)
}
public enum VFLoginStatus {
  case notLoggedIn
  case loggedIn(userUUID: Foundation.UUID)
}
extension VFLiveCommentsServiceImplementation {
  public func unflagComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFUnflagCommentError>)
}
public enum VFUnflagCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnflagCommentError, b: VFUnflagCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnflagCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol VFAdDelegate : ObjectiveC.NSObject {
  func generateAd(viewController: VFUIViewController, adPosition: Swift.Int) -> VFAdView?
  func getAdInterval(viewController: VFUIViewController) -> Swift.Int
  func getFirstAdPosition(viewController: VFUIViewController) -> Swift.Int
}
extension VFAdDelegate {
  public func getFirstAdPosition(viewController: VFUIViewController) -> Swift.Int
}
public protocol VFLocalAdDelegate : ObjectiveC.NSObject {
  func generateAd(adPosition: Swift.Int) -> VFAdView?
  func getAdInterval() -> Swift.Int
  func getFirstAdPosition() -> Swift.Int
}
extension VFLocalAdDelegate {
  public func getFirstAdPosition() -> Swift.Int
}
public struct ServerError : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct ServerErrorData : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension VFLiveCommentsServiceImplementation {
  public func flagComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, flagReason: Swift.String?, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFFlagCommentError>)
}
public enum VFFlagCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFFlagCommentError, b: VFFlagCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFFlagCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFLikeReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFLikeReviewError, b: VFLikeReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFLikeReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol VFLiveCommentsService {
  func spamComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFSpamCommentError>)
  func getComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<CommentResponse, VFCommentError>) -> Swift.Void))
  func getComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async throws -> (Swift.Result<CommentResponse, VFCommentError>)
  func makeTopComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFTopCommentError>)
  func enableComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFEnableCommentError>)
  func disableComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFDisableCommentError>)
  func getUserComments(sectionUUID: Foundation.UUID, userUUID: Foundation.UUID, limit: Swift.Int) async -> (Swift.Result<[CommentResponse], VFUserCommentsError>)
  func editorPickComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFEditorPickCommentError>)
  func createMedia(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, imageData: Foundation.Data) async -> (Swift.Result<CreateCommentMediaResponse, VFCreateCommentMediaError>)
  func removeTopComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFRemoveTopCommentError>)
  func removeEditorPickComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFRemoveEditorPickCommentError>)
  func unpinComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFUnpinCommentError>)
  func unspamComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFUnspamCommentError>)
  func editComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, articleMetadata: VFArticleMetadata, content: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFEditCommentError>)
  func pinComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFPinCommentError>)
  func undislikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFUndislikeCommentError>)
  func unflagComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFUnflagCommentError>)
  func flagComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, flagReason: Swift.String?, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFFlagCommentError>)
  func likeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFLikeCommentError>)
  func dislikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFDislikeCommentError>)
  func createComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, articleMetadata: VFArticleMetadata, content: Swift.String, mediaUUIDS: [Swift.String], syndicationKey: Swift.String?) async -> (Swift.Result<Foundation.UUID, VFCreateCommentError>)
  func createCommentReply(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, articleMetadata: VFArticleMetadata, content: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Foundation.UUID, VFCreateCommentReplyError>)
  func trendingComments(sectionUUID: Foundation.UUID, limit: Swift.Int, contentContainerWindowDays: Swift.Int?, contentContainerWindowHours: Swift.Int, sortedBy: VFTrendingSortType) async -> (Swift.Result<[TrendingResultResponse], VFTrendingError>)
  func updateCommentContainerSettings(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, isHidden: Swift.Bool, expiryTime: Swift.Int64?, isContentPremoderationEnabled: Swift.Bool) async -> (Swift.Result<Swift.Bool, VFUpdateCommentsContainerSettingsError>)
  func getCommentContainer(sectionUUID: Foundation.UUID, containerId: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<CommentContainerByIdResponse, VFCommentContainerError>)
  func getCommentContainer(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID) async throws -> (Swift.Result<CommentContainerByIdResponse, VFCommentContainerError>)
  func getCommentsProfile(sectionUUID: Foundation.UUID, userUUID: Foundation.UUID) async -> (Swift.Result<CommentsProfileResponse, VFCommentsProfileError>)
  func deleteComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFDeleteCommentError>)
  func getCommentsReplies(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, limit: Swift.Int, startingFrom: Swift.String?, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<[CommentResponse], VFCommentRepliesError>) -> Swift.Void))
  func getCommentsReplies(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, limit: Swift.Int, startingFrom: Swift.String?, syndicationKey: Swift.String?) async throws -> (Swift.Result<[CommentResponse], VFCommentRepliesError>)
  func unlikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFUnlikeCommentError>)
  func getComments(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, limit: Swift.Int, replyLimit: Swift.Int, startingFrom: Swift.String?, filteredBy: Swift.String?, sortType: VFSortType, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<CommentListResponse, VFCommentListError>) -> Swift.Void))
  func getComments(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, limit: Swift.Int, replyLimit: Swift.Int, startingFrom: Swift.String?, filteredBy: Swift.String?, sortType: VFSortType, syndicationKey: Swift.String?) async throws -> (Swift.Result<CommentListResponse, VFCommentListError>)
  func commentCount(sectionUUID: Foundation.UUID?, containerId: Swift.String, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<Swift.Int, VFCommentCountError>) -> Swift.Void))
  func commentCount(sectionUUID: Foundation.UUID?, containerId: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Int, VFCommentCountError>)
}
@_hasMissingDesignatedInitializers public class VFLiveCommentsServiceImplementation : VFLiveCommentsService {
  @objc deinit
}
public enum VFChatListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFChatListError, b: VFChatListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFChatListError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUpdateUserAvatarError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUpdateUserAvatarError, b: VFUpdateUserAvatarError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUpdateUserAvatarError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFTheme {
  case dark
  case light
  public static func == (a: VFTheme, b: VFTheme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias VFActionsCallbacks = (VFActionCallbackType) -> Swift.Void
public enum VFActionCallbackType {
  case seeMoreCommentsPressed
  case writeNewCommentPressed(actionType: VFNewCommentActionType)
  case closeNewCommentPressed
  case openProfilePressed(userUUID: Foundation.UUID, presentationType: VFProfilePresentationType)
  case notificationPressed(presentationType: VFNotificationPresentationType)
  case closeProfilePressed
  case trendingArticlePressed(metadata: VFArticleMetadata, containerId: Swift.String)
  case commentPosted(contentUUID: Foundation.UUID)
  case replyPosted(contentUUID: Foundation.UUID)
  case authPressed(promptType: VFAuthPromptType)
}
public enum VFAuthPromptType {
  case dislike
  case like
  case standaloneBellPressed
  case bellPressed
  case header
  case postContent
  case followConversation
  case followUser
  case muteUser
  public static func == (a: VFAuthPromptType, b: VFAuthPromptType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VFNotificationPresentationType {
  case profile(userUUID: Foundation.UUID)
  case content(containerUUID: Foundation.UUID, contentUUID: Foundation.UUID, containerId: Swift.String, articleMetadata: VFArticleMetadata)
}
public enum VFProfilePresentationType {
  case profile
  case feed
  public static func == (a: VFProfilePresentationType, b: VFProfilePresentationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEmptyChatsView : UIKit.UIView {
  @objc deinit
}
public enum VFNewCommentActionType : Swift.Equatable {
  case create
  case reply(content: Foundation.UUID)
  case edit(content: Foundation.UUID)
  public static func == (a: VFNewCommentActionType, b: VFNewCommentActionType) -> Swift.Bool
}
public enum VFSubmitContentError : Foundation.LocalizedError {
  case unknown
  case banned(banResponse: BanResponse)
}
public enum VFSingleChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFSingleChatError, b: VFSingleChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFSingleChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFClosePollError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFClosePollError, b: VFClosePollError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFClosePollError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFCreateReviewError : Foundation.LocalizedError {
  case unknown
  case unauthorized
  public static func == (a: VFCreateReviewError, b: VFCreateReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCreateReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct EventTestInfo : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommentListResponse : Swift.Decodable {
  public let contents: [CommentResponse]
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommentResponse : Swift.Decodable {
  public let actor_uuid: Foundation.UUID
  public var content: Swift.String
  public let date_created: Swift.Int64
  public init(from decoder: any Swift.Decoder) throws
}
extension VFLiveCommentsServiceImplementation {
  public func dislikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFDislikeCommentError>)
}
public enum VFDislikeCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFDislikeCommentError, b: VFDislikeCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFDislikeCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class AnalyticsServiceImplementation {
  public func addWidget(_ widgetType: WidgetType, uniqueUUID: Foundation.UUID)
  public func removeWidget(_ widgetType: WidgetType, uniqueUUID: Foundation.UUID)
  public func logLoadMoreClick(tab: Swift.String, eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: VFArticleMetadata)
  public func logConversationsBellClick(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: VFArticleMetadata)
  public func logTrayTriggerClick()
  public func logSortChange(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: VFArticleMetadata, sort: Swift.String, defaultSort: Swift.String, oldSort: Swift.String)
  public func logEventEngage(timeInPage: Swift.Int64, vfTime: Swift.Int64, hiddenTime: Swift.Int64?, focuses: Swift.Int, containerTimes: [VFEventEngageContainerTime])
  public func logTrackAdCode(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, articleMetadata: VFArticleMetadata, status: Swift.String, failureReason: Swift.String, widgetType: WidgetType)
  public func logTrackAdView(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID? = nil, articleMetadata: VFArticleMetadata? = nil, adIntegration: Swift.String, limit: Swift.Int, childLimit: Swift.Int, scrollDepth: CoreFoundation.CGFloat, promoInterval: Swift.Int, firstPromoPosition: Swift.Int, totalCount: Swift.Int, index: Swift.Int, threadType: Swift.String, widgetType: WidgetType)
  public func logLogout()
  public func logTrackAd(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID? = nil, articleMetadata: VFArticleMetadata? = nil, adIntegration: Swift.String, limit: Swift.Int? = nil, childLimit: Swift.Int? = nil, scrollDepth: CoreFoundation.CGFloat, promoInterval: Swift.Int? = nil, firstPromoPosition: Swift.Int, totalCount: Swift.Int? = nil, index: Swift.Int, threadType: Swift.String? = nil, widgetType: WidgetType)
  public func logInteraction(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: VFArticleMetadata, label: Swift.String, action: Swift.String)
  public func logPasswordReset(email: Swift.String)
  public func logSignup(loginType: Swift.String)
  public func logLoginFailure(loginType: Swift.String, error: Swift.String)
  public func logLoginSuccess()
  public func logContainerLoad(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, allCommentsCount: Swift.Int, eventContainerUUID: Foundation.UUID, eventArticleMetadata: VFArticleMetadata, contentContainerType: Swift.String)
  public func logPageView(eventContainerId: Swift.String, eventSectionUUID: Foundation.UUID, eventContainerUUID: Foundation.UUID, eventArticleMetadata: VFArticleMetadata)
  public func logEventAttemptedAction(eventAttemptedAction: EventAttemptedAction, eventContainerId: Swift.String?, eventSectionUUID: Foundation.UUID, eventArticleMetadata: VFArticleMetadata?)
  public func logABTestEvent(eventTestInfo: EventTestInfo, eventContainerId: Swift.String?, eventSectionUUID: Foundation.UUID, eventArticleMetadata: VFArticleMetadata?)
  @objc deinit
}
public enum VFCommentContainerSignatureError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCommentContainerSignatureError, b: VFCommentContainerSignatureError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCommentContainerSignatureError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFChatSelectionError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFChatSelectionError, b: VFChatSelectionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFChatSelectionError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFEnableChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFEnableChatError, b: VFEnableChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFEnableChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFChatModerationListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFChatModerationListError, b: VFChatModerationListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFChatModerationListError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFAuthenticationServiceImplementation {
  public func login(email: Swift.String, password: Swift.String, completion: @escaping ((Swift.Result<UserResponse, VFLoginError>) -> Swift.Void))
}
public enum VFLoginError : Foundation.LocalizedError {
  case banned(banData: ServerErrorData)
  case unknown
}
extension VFLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFAuthenticationServiceImplementation {
  public func logout()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
extension VFLiveCommentsServiceImplementation {
  public func likeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFLikeCommentError>)
}
public enum VFLikeCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFLikeCommentError, b: VFLikeCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFLikeCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func enableComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFEnableCommentError>)
}
public enum VFEnableCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFEnableCommentError, b: VFEnableCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFEnableCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class KeychainServiceImplementation {
  open subscript(key: Swift.String) -> Swift.String? {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VFLiveReviewsServiceImplementation {
  @objc deinit
}
public enum EventAttemptedAction : Swift.String, Swift.Encodable {
  case LIVECHAT_LIKED
  case LIVECHAT_DISLIKED
  case LIVECHAT_FLAG
  case COMMENT_POST
  case COMMENT_DISLIKED
  case COMMENT_FLAG
  case COMMENT_BOX_CLICK
  case COMMENT_REPLY_CLICK
  case COMMENT_LIKED
  case TRAY_PROFILE_CLICK
  case FOLLOW_CONVERSATION
  case TRAY_COMMUNITY_CLICK
  case TOPIC_FOLLOW
  case PROFILE_MUTE_USER
  case PROFILE_FOLLOW_USER
  case LOGIN
  case SIGNUP
  case POLLS_VOTE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CommentNode {
  @objc deinit
}
public enum CommentNodeType {
  case ad
  case divider
  case comment
  case writeReply
  case followPrompt
  public static func == (a: CommentNodeType, b: CommentNodeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func updateCommentContainerSettings(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, isHidden: Swift.Bool, expiryTime: Swift.Int64?, isContentPremoderationEnabled: Swift.Bool) async -> (Swift.Result<Swift.Bool, VFUpdateCommentsContainerSettingsError>)
}
public enum VFUpdateCommentsContainerSettingsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUpdateCommentsContainerSettingsError, b: VFUpdateCommentsContainerSettingsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUpdateCommentsContainerSettingsError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFAuthorView : UIKit.UIView {
  @objc deinit
}
public enum VFDisableChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFDisableChatError, b: VFDisableChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFDisableChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnspamReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnspamReviewError, b: VFUnspamReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnspamReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFVerticalTrendingViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(containerId: Swift.String?, title: Swift.String, limit: Swift.Int, daysPublished: Swift.Int?, trendWindow: Swift.Int, sort: VFTrendingSortType, settings: VFSettings, sectionUUID: Foundation.UUID? = nil) -> VFVerticalTrendingViewController
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setAdDelegate(adDelegate: any VFAdDelegate)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setLayoutDelegate(layoutDelegate: any VFLayoutDelegate)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension VFVerticalTrendingViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
}
extension VFVerticalTrendingViewController : VFLocalAdDelegate {
  @_Concurrency.MainActor @preconcurrency public func generateAd(adPosition: Swift.Int) -> VFAdView?
  @_Concurrency.MainActor @preconcurrency public func getAdInterval() -> Swift.Int
}
extension VFVerticalTrendingViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMove(toParent parent: UIKit.UIViewController?)
}
extension VFVerticalTrendingViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFRatingsSummaryView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension VFRatingsSummaryView : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
}
public enum VFUnflagChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnflagChatError, b: VFUnflagChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnflagChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUndislikeReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUndislikeReviewError, b: VFUndislikeReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUndislikeReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFSegmentedControl : UIKit.UISegmentedControl {
  @objc deinit
}
extension VFLiveCommentsServiceImplementation {
  public func getCommentContainer(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID) async throws -> (Swift.Result<CommentContainerByIdResponse, VFCommentContainerError>)
}
public enum VFLikeChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFLikeChatError, b: VFLikeChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFLikeChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func removeTopComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFRemoveTopCommentError>)
}
public enum VFRemoveTopCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFRemoveTopCommentError, b: VFRemoveTopCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFRemoveTopCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFVotePollError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFVotePollError, b: VFVotePollError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFVotePollError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFFeaturedView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFCarouselTrendingViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(containerId: Swift.String?, title: Swift.String, limit: Swift.Int, daysPublished: Swift.Int?, trendWindow: Swift.Int, sort: VFTrendingSortType, settings: VFSettings, sectionUUID: Foundation.UUID? = nil) -> VFCarouselTrendingViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setAdDelegate(adDelegate: any VFAdDelegate)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setLayoutDelegate(layoutDelegate: any VFLayoutDelegate)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VFCarouselTrendingViewController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension VFCarouselTrendingViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
extension VFCarouselTrendingViewController : VFLocalAdDelegate {
  @_Concurrency.MainActor @preconcurrency public func generateAd(adPosition: Swift.Int) -> VFAdView?
  @_Concurrency.MainActor @preconcurrency public func getAdInterval() -> Swift.Int
}
extension VFLiveCommentsServiceImplementation {
  public func getCommentsProfile(sectionUUID: Foundation.UUID, userUUID: Foundation.UUID) async -> (Swift.Result<CommentsProfileResponse, VFCommentsProfileError>)
}
public enum VFCommentsProfileError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCommentsProfileError, b: VFCommentsProfileError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCommentsProfileError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEnablePushView : UIKit.UIView {
  @objc deinit
}
public enum VFPollContainerError : Foundation.LocalizedError {
  case notFound
  case unknown
  public static func == (a: VFPollContainerError, b: VFPollContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFPollContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFRatingsPromptView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFSkeletonView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageService {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFUIViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum VFFlagReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFFlagReviewError, b: VFFlagReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFFlagReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol VFLoginDelegate : AnyObject {
  func startLogin()
}
public enum VFFilterType {
  case allComments
  case featured
  case topComments
  public static func == (a: VFFilterType, b: VFFilterType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VFUndislikeChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUndislikeChatError, b: VFUndislikeChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUndislikeChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct CreateCommentMediaResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct UnmuteUserResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFDislikeReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFDislikeReviewError, b: VFDislikeReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFDislikeReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol VFAuthenticationService {
  func cookieLogin(token: Swift.String, completion: @escaping ((Swift.Result<VFCookieLoginData, VFCookieLoginError>) -> Swift.Void))
  func logout()
  func login(email: Swift.String, password: Swift.String, completion: @escaping ((Swift.Result<UserResponse, VFLoginError>) -> Swift.Void))
  func openIdLogin(token: Swift.String, completion: @escaping ((Swift.Result<UserResponse, VFOpenIdLoginError>) -> Swift.Void))
  func socialLogin(token: Swift.String, provider: VFSocialLoginProvider, completion: @escaping ((Swift.Result<UserResponse, VFSocialLoginError>) -> Swift.Void))
  func loginRadiusLogin(token: Swift.String, provider: VFSocialLoginProvider, completion: @escaping ((Swift.Result<UserResponse, VFLoginRadiusLoginError>) -> Swift.Void))
  func resetPassword(email: Swift.String, completion: @escaping ((Swift.Result<Swift.Bool, VFPasswordResetError>) -> Swift.Void))
  func signup(name: Swift.String, email: Swift.String, password: Swift.String, recaptchaToken: Swift.String?, completion: @escaping ((Swift.Result<UserResponse, VFSignUpError>) -> Swift.Void))
  func getUserLoginStatus(completion: @escaping ((Swift.Result<VFLoginStatus, Swift.Never>) -> Swift.Void))
  func getUserLoginStatus() async -> (Swift.Result<VFLoginStatus, Swift.Never>)
}
@_hasMissingDesignatedInitializers public class VFAuthenticationServiceImplementation : VFAuthenticationService {
  @objc deinit
}
extension VFLiveCommentsServiceImplementation {
  public func editorPickComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFEditorPickCommentError>)
}
public enum VFEditorPickCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFEditorPickCommentError, b: VFEditorPickCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFEditorPickCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFAuthenticationServiceImplementation {
  public func signup(name: Swift.String, email: Swift.String, password: Swift.String, recaptchaToken: Swift.String? = nil, completion: @escaping ((Swift.Result<UserResponse, VFSignUpError>) -> Swift.Void))
}
public enum VFSignUpError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFSignUpError, b: VFSignUpError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFSignUpError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFAuthenticationServiceImplementation {
  public func socialLogin(token: Swift.String, provider: VFSocialLoginProvider, completion: @escaping ((Swift.Result<UserResponse, VFSocialLoginError>) -> Swift.Void))
}
public enum VFSocialLoginError : Foundation.LocalizedError {
  case unknown
  case banned(banData: ServerErrorData)
}
extension VFSocialLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func getCommentContainer(sectionUUID: Foundation.UUID, containerId: Swift.String, syndicationKey: Swift.String? = nil) async -> (Swift.Result<CommentContainerByIdResponse, VFCommentContainerError>)
}
public enum VFCommentContainerError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCommentContainerError, b: VFCommentContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCommentContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func unlikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFUnlikeCommentError>)
}
public enum VFUnlikeCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnlikeCommentError, b: VFUnlikeCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnlikeCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUserMutesError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUserMutesError, b: VFUserMutesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUserMutesError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnmuteUserError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnmuteUserError, b: VFUnmuteUserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnmuteUserError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFMuteUserError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFMuteUserError, b: VFMuteUserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFMuteUserError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFSpamView : UIKit.UIView {
  @objc deinit
}
public enum VFFlagChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFFlagChatError, b: VFFlagChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFFlagChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFAuthenticationServiceImplementation {
  public func openIdLogin(token: Swift.String, completion: @escaping ((Swift.Result<UserResponse, VFOpenIdLoginError>) -> Swift.Void))
}
public enum VFOpenIdLoginError : Foundation.LocalizedError {
  case unknown
  case banned(banData: ServerErrorData)
}
extension VFOpenIdLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnflagReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnflagReviewError, b: VFUnflagReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnflagReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct UserResponse : Swift.Decodable {
  public let id: Swift.Int64
  public let pic_small: Swift.String?
  public let pic_large: Swift.String?
  public let name: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public protocol VFLayoutDelegate : ObjectiveC.NSObject {
  func containerHeightUpdated(viewController: VFUIViewController, height: CoreFoundation.CGFloat)
}
public enum VFDeleteChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFDeleteChatError, b: VFDeleteChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFDeleteChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func createComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, articleMetadata: VFArticleMetadata, content: Swift.String, mediaUUIDS: [Swift.String], syndicationKey: Swift.String?) async -> (Swift.Result<Foundation.UUID, VFCreateCommentError>)
}
public enum VFCreateCommentError : Foundation.LocalizedError {
  case unknown
  case banned(banResponse: BanResponse)
  case unauthorized
}
extension VFCreateCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Constants {
}
extension Constants {
  public struct AvatarColors {
    public static let colors: [UIKit.UIColor]
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
public struct VFArticleMetadata {
  public let url: Foundation.URL
  public let title: Swift.String
  public let subtitle: Swift.String
  public let thumbnailUrl: Foundation.URL
  public init(url: Foundation.URL, title: Swift.String, subtitle: Swift.String, thumbnailUrl: Foundation.URL)
  public init(url: Swift.String, title: Swift.String, subtitle: Swift.String, thumbnailUrl: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFAdView : UIKit.UIView {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ViafouraSDK {
  public static func initialize(siteUUID: Swift.String, siteDomain: Swift.String)
  public static func setLoggingEnabled(_ isLoggingEnabled: Swift.Bool)
  public static func isLoggingEnabled() -> Swift.Bool
  public static func auth() -> any VFAuthenticationService
  public static func users() -> any VFUsersService
  public static func comments() -> any VFLiveCommentsService
  @objc deinit
}
extension VFLiveCommentsServiceImplementation {
  public func getUserComments(sectionUUID: Foundation.UUID, userUUID: Foundation.UUID, limit: Swift.Int) async -> (Swift.Result<[CommentResponse], VFUserCommentsError>)
}
public enum VFUserCommentsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUserCommentsError, b: VFUserCommentsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUserCommentsError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum EventType : Swift.String, Swift.Encodable {
  case AD_LOAD
  case AD_CODE
  case AD_VIEW
  case ATTEMPTED_ACTION
  case CHAT_PAGINATION
  case SORT_COMMENTS
  case INTERACTION
  case CONTAINER_LOAD
  case ENGAGE
  case LOGIN_FAILURE
  case LOGIN_SUCCESS
  case TRAY_TRIGGER_CLICK
  case LOAD_MORE_CLICK
  case LOAD_MORE_INITIAL_HEIGHT_CLICK
  case LOGOUT
  case PASSWORD_RESET
  case SIGNUP
  case CONVERSATIONS_BELL_CLICK
  case PAGE_VIEW
  case CONVERSATION_STARTER_CLICK
  case CONVERSATION_STARTER_VIEW
  case CONVERSATION_STARTER_LOAD
  case AB_TEST
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class ChatContent : Swift.Decodable {
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum VFUnlikeReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnlikeReviewError, b: VFUnlikeReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnlikeReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct ChatContainerSettings : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFSortType {
  case newest
  case oldest
  case mostLiked
  case mostReplies
  public var rawValue: Swift.String {
    get
  }
  public static func == (a: VFSortType, b: VFSortType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func getComments(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, limit: Swift.Int, replyLimit: Swift.Int, startingFrom: Swift.String? = nil, filteredBy: Swift.String?, sortType: VFSortType, syndicationKey: Swift.String? = nil, completion: @escaping ((Swift.Result<CommentListResponse, VFCommentListError>) -> Swift.Void))
  public func getComments(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, limit: Swift.Int, replyLimit: Swift.Int, startingFrom: Swift.String? = nil, filteredBy: Swift.String?, sortType: VFSortType, syndicationKey: Swift.String? = nil) async throws -> (Swift.Result<CommentListResponse, VFCommentListError>)
}
public enum VFCommentListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCommentListError, b: VFCommentListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCommentListError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUpdateUserError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUpdateUserError, b: VFUpdateUserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUpdateUserError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VFEventEngageContainerTime : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFPollViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(contentContainerUUID: Foundation.UUID, loginDelegate: any VFLoginDelegate, settings: VFSettings) -> VFPollViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setLayoutDelegate(layoutDelegate: any VFLayoutDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VFPollViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
extension VFLiveCommentsServiceImplementation {
  public func editComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, articleMetadata: VFArticleMetadata, content: Swift.String, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFEditCommentError>)
}
public enum VFEditCommentError : Foundation.LocalizedError {
  case unknown
  case unauthorized
  public static func == (a: VFEditCommentError, b: VFEditCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFEditCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveReviewsServiceImplementation {
  public func reviewCount(sectionUUID: Foundation.UUID? = nil, containerId: Swift.String, completion: @escaping ((Swift.Result<Swift.Int, VFReviewCountError>) -> Swift.Void))
  public func reviewCount(sectionUUID: Foundation.UUID? = nil, containerId: Swift.String) async throws -> (Swift.Result<Swift.Int, VFReviewCountError>)
}
public enum VFReviewCountError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFReviewCountError, b: VFReviewCountError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFReviewCountError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFCreatePollError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCreatePollError, b: VFCreatePollError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCreatePollError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct CommentsProfileResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFCreateReviewMediaError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCreateReviewMediaError, b: VFCreateReviewMediaError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCreateReviewMediaError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFCustomBadgeView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func sizeToFit()
  @_Concurrency.MainActor @preconcurrency public func setupView(isProfile: Swift.Bool)
  @objc deinit
}
extension VFAuthenticationServiceImplementation {
  public func loginRadiusLogin(token: Swift.String, provider: VFSocialLoginProvider, completion: @escaping ((Swift.Result<UserResponse, VFLoginRadiusLoginError>) -> Swift.Void))
}
public enum VFLoginRadiusLoginError : Foundation.LocalizedError {
  case unknown
  case banned(banData: ServerErrorData)
}
extension VFLoginRadiusLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFReviewRepliesError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFReviewRepliesError, b: VFReviewRepliesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFReviewRepliesError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFReviewModerationListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFReviewModerationListError, b: VFReviewModerationListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFReviewModerationListError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFCommentsContainerType {
  case conversations
  case reviews
  public static func == (a: VFCommentsContainerType, b: VFCommentsContainerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFPreviewCommentsViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(containerId: Swift.String, containerType: VFCommentsContainerType = .conversations, articleMetadata: VFArticleMetadata, loginDelegate: any VFLoginDelegate, settings: VFSettings, paginationSize: Swift.Int = 10, defaultSort: VFSortType = .newest, featuredTabThreshold: Swift.Int = 3, replySize: Swift.Int = 2, syndicationKey: Swift.String? = nil, sectionUUID: Foundation.UUID? = nil) -> VFPreviewCommentsViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setAdDelegate(adDelegate: any VFAdDelegate)
  @_Concurrency.MainActor @preconcurrency public func getContentScrollPosition(contentUUID: Foundation.UUID, completion: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency public func setAuthorsIds(authors: [Swift.String])
  @_Concurrency.MainActor @preconcurrency public func setLayoutDelegate(layoutDelegate: any VFLayoutDelegate)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension VFPreviewCommentsViewController : VFLocalAdDelegate {
  @_Concurrency.MainActor @preconcurrency public func generateAd(adPosition: Swift.Int) -> VFAdView?
  @_Concurrency.MainActor @preconcurrency public func getAdInterval() -> Swift.Int
  @_Concurrency.MainActor @preconcurrency public func getFirstAdPosition() -> Swift.Int
}
extension VFPreviewCommentsViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
extension VFPreviewCommentsViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMove(toParent parent: UIKit.UIViewController?)
}
extension VFPreviewCommentsViewController : VFLayoutDelegate {
  @_Concurrency.MainActor @preconcurrency public func containerHeightUpdated(viewController: VFUIViewController, height: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFFlagsView : UIKit.UIView {
  @objc deinit
}
public enum VFTrendingSortType : Swift.String {
  case comments
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFNewCommentsNotificationView : UIKit.UIView {
  @objc deinit
}
public enum VFCreateReviewReplyError : Foundation.LocalizedError {
  case unknown
  case unauthorized
  public static func == (a: VFCreateReviewReplyError, b: VFCreateReviewReplyError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCreateReviewReplyError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFAllCommentsView : UIKit.UIView {
  @objc deinit
}
extension VFLiveCommentsServiceImplementation {
  public func undislikeComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFUndislikeCommentError>)
}
public enum VFUndislikeCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUndislikeCommentError, b: VFUndislikeCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUndislikeCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFSpamReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFSpamReviewError, b: VFSpamReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFSpamReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFRemovePollError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFRemovePollError, b: VFRemovePollError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFRemovePollError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func commentCount(sectionUUID: Foundation.UUID? = nil, containerId: Swift.String, syndicationKey: Swift.String?, completion: @escaping ((Swift.Result<Swift.Int, VFCommentCountError>) -> Swift.Void))
  public func commentCount(sectionUUID: Foundation.UUID? = nil, containerId: Swift.String, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Int, VFCommentCountError>)
}
public enum VFCommentCountError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCommentCountError, b: VFCommentCountError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCommentCountError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFEnableReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFEnableReviewError, b: VFEnableReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFEnableReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFRemoveEditorPickReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFRemoveEditorPickReviewError, b: VFRemoveEditorPickReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFRemoveEditorPickReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFFollowView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VFLiveCommentsServiceImplementation {
  public func getComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil, completion: @escaping ((Swift.Result<CommentResponse, VFCommentError>) -> Swift.Void))
  public func getComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async throws -> (Swift.Result<CommentResponse, VFCommentError>)
}
public enum VFCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCommentError, b: VFCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFContentRemovedView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFLoadingView : UIKit.UIActivityIndicatorView {
  @objc deinit
}
public enum VFTopicsSubscribedError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFTopicsSubscribedError, b: VFTopicsSubscribedError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFTopicsSubscribedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFTabView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFScrollDownView : UIKit.UIView {
  @objc deinit
}
public enum VFCustomizableView {
  case postButton(button: VFButton)
  case postTextView(textField: VFTextView)
  case postCloseImage(image: VFImageView)
  case postTitle(label: VFLabel)
  case postHeaderDescription(label: VFLabel)
  case postPlaceholderLabel(label: VFLabel)
  case postImageSkeletonView(skeletonView: VFSkeletonView)
  case postTitleSkeletonView(skeletonView: VFSkeletonView)
  case postDescriptionSkeletonView(skeletonView: VFSkeletonView)
  case postBackgroundView(view: UIKit.UIView)
  case profileNameLabel(label: VFLabel)
  case profileLogoutLabel(label: VFLabel)
  case profileCloseImage(image: VFImageView)
  case profileLikesLabel(label: VFLabel)
  case profileFollowersLabel(label: VFLabel)
  case profileSegmentedControl(segmentedControl: VFSegmentedControl)
  case profileBackgroundView(view: UIKit.UIView)
  case commentCellExpandRepliesLoading(loadingView: VFLoadingView)
  case commentCellExpandRepliesImage(image: VFImageView)
  case commentCellExpandRepliesLabel(label: VFLabel)
  case commentCellDateLabel(label: VFLabel)
  case commentCellNameLabel(label: VFLabel)
  case commentCellContentLabel(label: VFLabel)
  case commentCellOptionsButton(button: VFButton)
  case commentCellLikeImage(image: VFImageView)
  case commentCellLikeLabel(label: VFLabel)
  case commentCellDislikeImage(image: VFImageView)
  case commentCellFollowView(view: UIKit.UIView)
  case commentCellDislikeLabel(label: VFLabel)
  case commentCellReplyLabel(label: VFLabel)
  case commentCellReplyImage(image: VFImageView)
  case commentCellUserImage(image: VFImageView)
  case commentCellUserAvatar(view: UIKit.UIView)
  case commentCellCustomBadge(badge: VFCustomBadgeView)
  case commentCellSeparator(separator: VFSeparatorView)
  case previewEmptyCommentsView(emptyCommentsView: VFEmptyCommentsView)
  case previewSeeMoreCommentsButton(button: VFButton)
  case previewTitleLabel(label: VFLabel)
  case previewPrivacyLabel(label: VFLabel)
  case previewUserPromptLabel(label: VFLabel)
  case previewCommentPrompt(view: UIKit.UIView)
  case previewHeaderView(view: UIKit.UIView)
  case previewSortImage(image: VFImageView)
  case previewSortLabel(label: VFLabel)
  case previewAllComments(view: UIKit.UIView)
  case previewPoweredByView(poweredByView: VFPoweredByViafouraView)
  case previewSkeletonView(skeletonView: UIKit.UIView)
  case previewFollowView(followView: VFFollowView)
  case previewBackgroundView(view: UIKit.UIView)
  case trendingVerticalBackgroundView(view: UIKit.UIView)
  case trendingVerticalFullImage(image: VFImageView)
  case trendingVerticalFullTitle(label: VFLabel)
  case trendingVerticalFullCount(label: VFLabel)
  case trendingVerticalCondensedTitle(label: VFLabel)
  case trendingVerticalCondensedCount(label: VFLabel)
  case trendingCarouselTitle(label: VFLabel)
  case trendingCarouselImage(image: VFImageView)
  case trendingCarouselCount(label: VFLabel)
  case trendingCarouselBackgroundView(view: UIKit.UIView)
  case bottomPickerView(view: UIKit.UIView)
  case bottomPickerTitle(label: VFLabel)
  case bottomPickerTitleLabel(label: VFLabel)
  case bottomPickerLabel(label: VFLabel, isActive: Swift.Bool)
  case bottomPickerSeparator(separatorView: VFSeparatorView)
  case chatCellContentLabel(label: VFLabel)
  case chatCellDateLabel(label: VFLabel)
  case chatCellUserNameLabel(label: VFLabel)
  case chatPostView(view: UIKit.UIView)
  case chatPostImage(image: VFImageView)
  case chatPostLoading(loadingView: VFLoadingView)
  case chatTextView(textView: VFTextView)
  case chatBackgroundView(backgroundView: UIKit.UIView)
  case chatLoading(loadingView: VFLoadingView)
  case chatLoadingMore(loadingView: VFLoadingView)
  case chatEmptyView(emptyView: VFEmptyChatsView)
  case notificationBellText(label: VFLabel)
  case notificationBellIcon(icon: VFImageView)
}
extension VFLiveCommentsServiceImplementation {
  public func unpinComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFUnpinCommentError>)
}
public enum VFUnpinCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnpinCommentError, b: VFUnpinCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnpinCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func getCommentsReplies(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, limit: Swift.Int, startingFrom: Swift.String? = nil, syndicationKey: Swift.String? = nil, completion: @escaping ((Swift.Result<[CommentResponse], VFCommentRepliesError>) -> Swift.Void))
  public func getCommentsReplies(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, limit: Swift.Int, startingFrom: Swift.String? = nil, syndicationKey: Swift.String? = nil) async throws -> (Swift.Result<[CommentResponse], VFCommentRepliesError>)
}
public enum VFCommentRepliesError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCommentRepliesError, b: VFCommentRepliesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCommentRepliesError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class VFNotificationsServiceImplementation {
  @objc deinit
}
public enum VFReplyChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFReplyChatError, b: VFReplyChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFReplyChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFCommentModerationListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCommentModerationListError, b: VFCommentModerationListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCommentModerationListError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFEmptyCommentsView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let label: UIKit.UILabel
  @objc deinit
}
extension AnalyticsServiceImplementation {
  public func logTyping(contentContainerUUID: Foundation.UUID, threadUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?)
}
extension VFLiveCommentsServiceImplementation {
  public func trendingComments(sectionUUID: Foundation.UUID, limit: Swift.Int, contentContainerWindowDays: Swift.Int?, contentContainerWindowHours: Swift.Int, sortedBy: VFTrendingSortType) async -> (Swift.Result<[TrendingResultResponse], VFTrendingError>)
}
public enum VFTrendingError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFTrendingError, b: VFTrendingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFTrendingError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func createMedia(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, imageData: Foundation.Data) async -> (Swift.Result<CreateCommentMediaResponse, VFCreateCommentMediaError>)
}
public enum VFCreateCommentMediaError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCreateCommentMediaError, b: VFCreateCommentMediaError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCreateCommentMediaError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFDisabledView : UIKit.UIView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFSwitch : UIKit.UISwitch {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFNotificationBellView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var isElevationEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isBackgroundColorEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public init(settings: VFSettings, loginDelegate: any VFLoginDelegate, onBellClicked: @escaping ((Foundation.UUID) -> Swift.Void))
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFProfileViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(userUUID: Foundation.UUID, presentationType: VFProfilePresentationType, loginDelegate: any VFLoginDelegate, settings: VFSettings) -> VFProfileViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VFProfileViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
extension VFProfileViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFSeparatorView : UIKit.UIView {
  @objc deinit
}
public enum VFChatContainerError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFChatContainerError, b: VFChatContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFChatContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class TrendingContent {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommentContent {
  @objc deinit
}
public enum VFReviewContainerError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFReviewContainerError, b: VFReviewContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFReviewContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class ViewChatReplyViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(originalChatContent: ChatContent, loginDelegate: any VFLoginDelegate, settings: VFSettings) -> ViewChatReplyViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct BanResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFUserReviewsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUserReviewsError, b: VFUserReviewsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUserReviewsError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFDeleteReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFDeleteReviewError, b: VFDeleteReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFDeleteReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class ChatReplyViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(originalChatContent: ChatContent, containerSettings: ChatContainerSettings?, containerId: Swift.String, articleMetadata: VFArticleMetadata, loginDelegate: any VFLoginDelegate, settings: VFSettings) -> ChatReplyViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ChatReplyViewController : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class TopCommentsDisclaimerViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(settings: VFSettings) -> TopCommentsDisclaimerViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum VFUpdateReviewsContainerSettingsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUpdateReviewsContainerSettingsError, b: VFUpdateReviewsContainerSettingsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUpdateReviewsContainerSettingsError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFAuthenticationServiceImplementation {
  public func cookieLogin(token: Swift.String, completion: @escaping ((Swift.Result<VFCookieLoginData, VFCookieLoginError>) -> Swift.Void))
}
public struct VFCookieLoginData {
}
public enum VFCookieLoginError : Foundation.LocalizedError {
  case unknown
  case banned(banData: ServerErrorData)
}
extension VFCookieLoginError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFPinReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFPinReviewError, b: VFPinReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFPinReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFReviewListError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFReviewListError, b: VFReviewListError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFReviewListError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFSubscribeTopicError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFSubscribeTopicError, b: VFSubscribeTopicError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFSubscribeTopicError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnpinReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnpinReviewError, b: VFUnpinReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnpinReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct MuteUserResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrendingResultResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum VFCreateChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFCreateChatError, b: VFCreateChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFCreateChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFEditReviewError : Foundation.LocalizedError {
  case unknown
  case unauthorized
  public static func == (a: VFEditReviewError, b: VFEditReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFEditReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VFFonts : Swift.Equatable {
  public static let fontBoldDefault: UIKit.UIFont
  public static let fontLightDefault: UIKit.UIFont
  public static let fontMediumDefault: UIKit.UIFont
  public static let fontRegularDefault: UIKit.UIFont
  public static let fontSemiboldDefault: UIKit.UIFont
  public var fontRegular: UIKit.UIFont
  public var fontMedium: UIKit.UIFont
  public var fontBold: UIKit.UIFont
  public var fontLight: UIKit.UIFont
  public var fontSemibold: UIKit.UIFont
  public init(fontLight: UIKit.UIFont = fontLightDefault, fontRegular: UIKit.UIFont = fontRegularDefault, fontMedium: UIKit.UIFont = fontMediumDefault, fontSemibold: UIKit.UIFont = fontSemiboldDefault, fontBold: UIKit.UIFont = fontBoldDefault)
  public static func == (a: VFFonts, b: VFFonts) -> Swift.Bool
}
extension VFLiveCommentsServiceImplementation {
  public func removeEditorPickComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String?) async -> (Swift.Result<Swift.Bool, VFRemoveEditorPickCommentError>)
}
public enum VFRemoveEditorPickCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFRemoveEditorPickCommentError, b: VFRemoveEditorPickCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFRemoveEditorPickCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFPoweredByViafouraView : UIKit.UIView {
  @objc deinit
}
public enum VFReviewsProfileError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFReviewsProfileError, b: VFReviewsProfileError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFReviewsProfileError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol StoryboardCreateable : UIKit.UIViewController {
  static var storyboardName: Swift.String { get }
}
extension StoryboardCreateable {
  public static func new() -> Self?
}
extension VFLiveCommentsServiceImplementation {
  public func spamComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFSpamCommentError>)
}
public enum VFSpamCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFSpamCommentError, b: VFSpamCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFSpamCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFPinnedView : UIKit.UIView {
  @objc deinit
}
public enum VFTrendingReviewsError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFTrendingReviewsError, b: VFTrendingReviewsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFTrendingReviewsError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFDisableReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFDisableReviewError, b: VFDisableReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFDisableReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnsubscribeTopicError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnsubscribeTopicError, b: VFUnsubscribeTopicError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnsubscribeTopicError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func pinComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFPinCommentError>)
}
public enum VFPinCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFPinCommentError, b: VFPinCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFPinCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUnlikeChatError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnlikeChatError, b: VFUnlikeChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnlikeChatError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFReviewError, b: VFReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VFAccessibilityIdentifiers {
  public static let previewCommentsPromptView: Swift.String
  public static let postButton: Swift.String
  public static let postTextField: Swift.String
}
public protocol VFCustomUIDelegate : AnyObject {
  func customizeView(theme: VFTheme, view: VFCustomizableView)
}
public enum VFEditorPickReviewError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFEditorPickReviewError, b: VFEditorPickReviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFEditorPickReviewError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct VFSettings : Swift.Equatable {
  public let fonts: VFFonts
  public var colors: VFColors
  public init(colors: VFColors, fonts: VFFonts = VFFonts())
  public static func == (lhs: VFSettings, rhs: VFSettings) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SingleChatViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFNewCommentViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static func new(newCommentActionType: VFNewCommentActionType, containerType: VFCommentsContainerType = .conversations, containerId: Swift.String, articleMetadata: VFArticleMetadata, loginDelegate: any VFLoginDelegate, settings: VFSettings, syndicationKey: Swift.String? = nil, sectionUUID: Foundation.UUID? = nil) -> VFNewCommentViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canResignFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VFNewCommentViewController : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
extension VFNewCommentViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
public enum WidgetType : Swift.String, Swift.Encodable {
  case LIVE_BLOG
  case CONTENT_RECIRCULATION
  case STANDALONE_AD
  case CONVERSATION_STARTER
  case LIVECHAT
  case SHAREBAR
  case LIVE_REVIEWS
  case LIVE_CONVERSATIONS
  case TRAY_TRIGGER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension VFAuthenticationServiceImplementation {
  public func resetPassword(email: Swift.String, completion: @escaping ((Swift.Result<Swift.Bool, VFPasswordResetError>) -> Swift.Void))
}
public enum VFPasswordResetError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFPasswordResetError, b: VFPasswordResetError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFPasswordResetError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFImageView : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol VFUsersService {
  func isUserMuted(userId: Swift.String, mutedUserUUID: Foundation.UUID) async -> (Swift.Result<Swift.Bool, VFUserMutesError>)
  func getUserMutes(userId: Swift.String) async -> (Swift.Result<UserMutesResponse, VFUserMutesError>)
  func unmuteUser(userId: Swift.String) async -> (Swift.Result<UnmuteUserResponse, VFUnmuteUserError>)
  func muteUser(userId: Swift.String) async -> (Swift.Result<MuteUserResponse, VFMuteUserError>)
  func getUsersInfo(usersUUID: [(Foundation.UUID, Swift.String?)]) async -> (Swift.Result<[UserResponse?], VFUserInfoError>)
  func getUserInfo(userUUID: Foundation.UUID, completion: @escaping ((Swift.Result<UserResponse, VFUserInfoError>) -> Swift.Void))
  func getUserInfo(userUUID: Foundation.UUID) async -> (Swift.Result<UserResponse, VFUserInfoError>)
  func updateUserAvatar(imageData: Foundation.Data) async -> (Swift.Result<Swift.Bool, VFUpdateUserAvatarError>)
  func updateUser(email: Swift.String?, name: Swift.String?, password: Swift.String?, newPassword: Swift.String?, emailNoticeFrequency: Swift.String?) async -> (Swift.Result<Swift.Bool, VFUpdateUserError>)
}
public enum VFUserInfoError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUserInfoError, b: VFUserInfoError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUserInfoError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFLiveView : UIKit.UIView {
  @objc deinit
}
public enum VFReviewContainerSignatureError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFReviewContainerSignatureError, b: VFReviewContainerSignatureError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFReviewContainerSignatureError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFUpdateChatContainerError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUpdateChatContainerError, b: VFUpdateChatContainerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUpdateChatContainerError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func disableComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFDisableCommentError>)
}
public enum VFDisableCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFDisableCommentError, b: VFDisableCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFDisableCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum VFSocialLoginProvider : Swift.String, Swift.Encodable, Swift.Decodable {
  case google
  case twitter
  case linkedin
  case apple
  case viafouraDefinedCookie
  case facebook
  case yahoo
  case windowslive
  case aol
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFTextView : UIKit.UITextView {
  @available(iOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VFTrustedView : UIKit.UIView {
  @objc deinit
}
public enum EventLoginType : Swift.String, Swift.Encodable {
  case cookie
  case oauth
  case loginradius
  case viafoura
  case loginradius_social
  case embedded_loginradius
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func unspamComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFUnspamCommentError>)
}
public enum VFUnspamCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFUnspamCommentError, b: VFUnspamCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFUnspamCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension VFLiveCommentsServiceImplementation {
  public func deleteComment(sectionUUID: Foundation.UUID, contentContainerUUID: Foundation.UUID, contentUUID: Foundation.UUID, syndicationKey: Swift.String? = nil) async -> (Swift.Result<Swift.Bool, VFDeleteCommentError>)
}
public enum VFDeleteCommentError : Foundation.LocalizedError {
  case unknown
  public static func == (a: VFDeleteCommentError, b: VFDeleteCommentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VFDeleteCommentError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VFLiveChatViewController : VFUIViewController {
  @_Concurrency.MainActor @preconcurrency public static var storyboardName: Swift.String
  @_Concurrency.MainActor @preconcurrency public static func new(containerId: Swift.String, articleMetadata: VFArticleMetadata, loginDelegate: any VFLoginDelegate, settings: VFSettings, paginationSize: Swift.Int = 10, sectionUUID: Foundation.UUID? = nil) -> VFLiveChatViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setTheme(theme: VFTheme)
  @_Concurrency.MainActor @preconcurrency public func setActionCallbacks(callbacks: @escaping VFActionsCallbacks)
  @_Concurrency.MainActor @preconcurrency public func setCustomUIDelegate(customUIDelegate: any VFCustomUIDelegate)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VFLiveChatViewController : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
extension VFDislikeChatError : Swift.Equatable {}
extension VFDislikeChatError : Swift.Hashable {}
extension VFTopCommentError : Swift.Equatable {}
extension VFTopCommentError : Swift.Hashable {}
extension VFUnflagCommentError : Swift.Equatable {}
extension VFUnflagCommentError : Swift.Hashable {}
extension VFFlagCommentError : Swift.Equatable {}
extension VFFlagCommentError : Swift.Hashable {}
extension VFLikeReviewError : Swift.Equatable {}
extension VFLikeReviewError : Swift.Hashable {}
extension VFChatListError : Swift.Equatable {}
extension VFChatListError : Swift.Hashable {}
extension VFUpdateUserAvatarError : Swift.Equatable {}
extension VFUpdateUserAvatarError : Swift.Hashable {}
extension VFTheme : Swift.Equatable {}
extension VFTheme : Swift.Hashable {}
extension VFAuthPromptType : Swift.Equatable {}
extension VFAuthPromptType : Swift.Hashable {}
extension VFProfilePresentationType : Swift.Equatable {}
extension VFProfilePresentationType : Swift.Hashable {}
extension VFSingleChatError : Swift.Equatable {}
extension VFSingleChatError : Swift.Hashable {}
extension VFClosePollError : Swift.Equatable {}
extension VFClosePollError : Swift.Hashable {}
extension VFCreateReviewError : Swift.Equatable {}
extension VFCreateReviewError : Swift.Hashable {}
extension VFDislikeCommentError : Swift.Equatable {}
extension VFDislikeCommentError : Swift.Hashable {}
extension VFCommentContainerSignatureError : Swift.Equatable {}
extension VFCommentContainerSignatureError : Swift.Hashable {}
extension VFChatSelectionError : Swift.Equatable {}
extension VFChatSelectionError : Swift.Hashable {}
extension VFEnableChatError : Swift.Equatable {}
extension VFEnableChatError : Swift.Hashable {}
extension VFChatModerationListError : Swift.Equatable {}
extension VFChatModerationListError : Swift.Hashable {}
extension VFLikeCommentError : Swift.Equatable {}
extension VFLikeCommentError : Swift.Hashable {}
extension VFEnableCommentError : Swift.Equatable {}
extension VFEnableCommentError : Swift.Hashable {}
extension EventAttemptedAction : Swift.Equatable {}
extension EventAttemptedAction : Swift.Hashable {}
extension EventAttemptedAction : Swift.RawRepresentable {}
extension CommentNodeType : Swift.Equatable {}
extension CommentNodeType : Swift.Hashable {}
extension VFUpdateCommentsContainerSettingsError : Swift.Equatable {}
extension VFUpdateCommentsContainerSettingsError : Swift.Hashable {}
extension VFDisableChatError : Swift.Equatable {}
extension VFDisableChatError : Swift.Hashable {}
extension VFUnspamReviewError : Swift.Equatable {}
extension VFUnspamReviewError : Swift.Hashable {}
extension VFUnflagChatError : Swift.Equatable {}
extension VFUnflagChatError : Swift.Hashable {}
extension VFUndislikeReviewError : Swift.Equatable {}
extension VFUndislikeReviewError : Swift.Hashable {}
extension VFLikeChatError : Swift.Equatable {}
extension VFLikeChatError : Swift.Hashable {}
extension VFRemoveTopCommentError : Swift.Equatable {}
extension VFRemoveTopCommentError : Swift.Hashable {}
extension VFVotePollError : Swift.Equatable {}
extension VFVotePollError : Swift.Hashable {}
extension VFCommentsProfileError : Swift.Equatable {}
extension VFCommentsProfileError : Swift.Hashable {}
extension VFPollContainerError : Swift.Equatable {}
extension VFPollContainerError : Swift.Hashable {}
extension VFFlagReviewError : Swift.Equatable {}
extension VFFlagReviewError : Swift.Hashable {}
extension VFFilterType : Swift.Equatable {}
extension VFFilterType : Swift.Hashable {}
extension VFUndislikeChatError : Swift.Equatable {}
extension VFUndislikeChatError : Swift.Hashable {}
extension VFDislikeReviewError : Swift.Equatable {}
extension VFDislikeReviewError : Swift.Hashable {}
extension VFEditorPickCommentError : Swift.Equatable {}
extension VFEditorPickCommentError : Swift.Hashable {}
extension VFSignUpError : Swift.Equatable {}
extension VFSignUpError : Swift.Hashable {}
extension VFCommentContainerError : Swift.Equatable {}
extension VFCommentContainerError : Swift.Hashable {}
extension VFUnlikeCommentError : Swift.Equatable {}
extension VFUnlikeCommentError : Swift.Hashable {}
extension VFUserMutesError : Swift.Equatable {}
extension VFUserMutesError : Swift.Hashable {}
extension VFUnmuteUserError : Swift.Equatable {}
extension VFUnmuteUserError : Swift.Hashable {}
extension VFMuteUserError : Swift.Equatable {}
extension VFMuteUserError : Swift.Hashable {}
extension VFFlagChatError : Swift.Equatable {}
extension VFFlagChatError : Swift.Hashable {}
extension VFUnflagReviewError : Swift.Equatable {}
extension VFUnflagReviewError : Swift.Hashable {}
extension VFDeleteChatError : Swift.Equatable {}
extension VFDeleteChatError : Swift.Hashable {}
extension VFUserCommentsError : Swift.Equatable {}
extension VFUserCommentsError : Swift.Hashable {}
extension EventType : Swift.Equatable {}
extension EventType : Swift.Hashable {}
extension EventType : Swift.RawRepresentable {}
extension VFUnlikeReviewError : Swift.Equatable {}
extension VFUnlikeReviewError : Swift.Hashable {}
extension VFSortType : Swift.Equatable {}
extension VFSortType : Swift.Hashable {}
extension VFCommentListError : Swift.Equatable {}
extension VFCommentListError : Swift.Hashable {}
extension VFUpdateUserError : Swift.Equatable {}
extension VFUpdateUserError : Swift.Hashable {}
extension VFEditCommentError : Swift.Equatable {}
extension VFEditCommentError : Swift.Hashable {}
extension VFReviewCountError : Swift.Equatable {}
extension VFReviewCountError : Swift.Hashable {}
extension VFCreatePollError : Swift.Equatable {}
extension VFCreatePollError : Swift.Hashable {}
extension VFCreateReviewMediaError : Swift.Equatable {}
extension VFCreateReviewMediaError : Swift.Hashable {}
extension VFReviewRepliesError : Swift.Equatable {}
extension VFReviewRepliesError : Swift.Hashable {}
extension VFReviewModerationListError : Swift.Equatable {}
extension VFReviewModerationListError : Swift.Hashable {}
extension VFCommentsContainerType : Swift.Equatable {}
extension VFCommentsContainerType : Swift.Hashable {}
extension VFTrendingSortType : Swift.Equatable {}
extension VFTrendingSortType : Swift.Hashable {}
extension VFTrendingSortType : Swift.RawRepresentable {}
extension VFCreateReviewReplyError : Swift.Equatable {}
extension VFCreateReviewReplyError : Swift.Hashable {}
extension VFUndislikeCommentError : Swift.Equatable {}
extension VFUndislikeCommentError : Swift.Hashable {}
extension VFSpamReviewError : Swift.Equatable {}
extension VFSpamReviewError : Swift.Hashable {}
extension VFRemovePollError : Swift.Equatable {}
extension VFRemovePollError : Swift.Hashable {}
extension VFCommentCountError : Swift.Equatable {}
extension VFCommentCountError : Swift.Hashable {}
extension VFEnableReviewError : Swift.Equatable {}
extension VFEnableReviewError : Swift.Hashable {}
extension VFRemoveEditorPickReviewError : Swift.Equatable {}
extension VFRemoveEditorPickReviewError : Swift.Hashable {}
extension VFCommentError : Swift.Equatable {}
extension VFCommentError : Swift.Hashable {}
extension VFTopicsSubscribedError : Swift.Equatable {}
extension VFTopicsSubscribedError : Swift.Hashable {}
extension VFUnpinCommentError : Swift.Equatable {}
extension VFUnpinCommentError : Swift.Hashable {}
extension VFCommentRepliesError : Swift.Equatable {}
extension VFCommentRepliesError : Swift.Hashable {}
extension VFReplyChatError : Swift.Equatable {}
extension VFReplyChatError : Swift.Hashable {}
extension VFCommentModerationListError : Swift.Equatable {}
extension VFCommentModerationListError : Swift.Hashable {}
extension VFTrendingError : Swift.Equatable {}
extension VFTrendingError : Swift.Hashable {}
extension VFCreateCommentMediaError : Swift.Equatable {}
extension VFCreateCommentMediaError : Swift.Hashable {}
extension VFChatContainerError : Swift.Equatable {}
extension VFChatContainerError : Swift.Hashable {}
extension VFReviewContainerError : Swift.Equatable {}
extension VFReviewContainerError : Swift.Hashable {}
extension VFUserReviewsError : Swift.Equatable {}
extension VFUserReviewsError : Swift.Hashable {}
extension VFDeleteReviewError : Swift.Equatable {}
extension VFDeleteReviewError : Swift.Hashable {}
extension VFUpdateReviewsContainerSettingsError : Swift.Equatable {}
extension VFUpdateReviewsContainerSettingsError : Swift.Hashable {}
extension VFPinReviewError : Swift.Equatable {}
extension VFPinReviewError : Swift.Hashable {}
extension VFReviewListError : Swift.Equatable {}
extension VFReviewListError : Swift.Hashable {}
extension VFSubscribeTopicError : Swift.Equatable {}
extension VFSubscribeTopicError : Swift.Hashable {}
extension VFUnpinReviewError : Swift.Equatable {}
extension VFUnpinReviewError : Swift.Hashable {}
extension VFCreateChatError : Swift.Equatable {}
extension VFCreateChatError : Swift.Hashable {}
extension VFEditReviewError : Swift.Equatable {}
extension VFEditReviewError : Swift.Hashable {}
extension VFRemoveEditorPickCommentError : Swift.Equatable {}
extension VFRemoveEditorPickCommentError : Swift.Hashable {}
extension VFReviewsProfileError : Swift.Equatable {}
extension VFReviewsProfileError : Swift.Hashable {}
extension VFSpamCommentError : Swift.Equatable {}
extension VFSpamCommentError : Swift.Hashable {}
extension VFTrendingReviewsError : Swift.Equatable {}
extension VFTrendingReviewsError : Swift.Hashable {}
extension VFDisableReviewError : Swift.Equatable {}
extension VFDisableReviewError : Swift.Hashable {}
extension VFUnsubscribeTopicError : Swift.Equatable {}
extension VFUnsubscribeTopicError : Swift.Hashable {}
extension VFPinCommentError : Swift.Equatable {}
extension VFPinCommentError : Swift.Hashable {}
extension VFUnlikeChatError : Swift.Equatable {}
extension VFUnlikeChatError : Swift.Hashable {}
extension VFReviewError : Swift.Equatable {}
extension VFReviewError : Swift.Hashable {}
extension VFEditorPickReviewError : Swift.Equatable {}
extension VFEditorPickReviewError : Swift.Hashable {}
extension WidgetType : Swift.Equatable {}
extension WidgetType : Swift.Hashable {}
extension WidgetType : Swift.RawRepresentable {}
extension VFPasswordResetError : Swift.Equatable {}
extension VFPasswordResetError : Swift.Hashable {}
extension VFUserInfoError : Swift.Equatable {}
extension VFUserInfoError : Swift.Hashable {}
extension VFReviewContainerSignatureError : Swift.Equatable {}
extension VFReviewContainerSignatureError : Swift.Hashable {}
extension VFUpdateChatContainerError : Swift.Equatable {}
extension VFUpdateChatContainerError : Swift.Hashable {}
extension VFDisableCommentError : Swift.Equatable {}
extension VFDisableCommentError : Swift.Hashable {}
extension VFSocialLoginProvider : Swift.Equatable {}
extension VFSocialLoginProvider : Swift.Hashable {}
extension VFSocialLoginProvider : Swift.RawRepresentable {}
extension EventLoginType : Swift.Equatable {}
extension EventLoginType : Swift.Hashable {}
extension EventLoginType : Swift.RawRepresentable {}
extension VFUnspamCommentError : Swift.Equatable {}
extension VFUnspamCommentError : Swift.Hashable {}
extension VFDeleteCommentError : Swift.Equatable {}
extension VFDeleteCommentError : Swift.Hashable {}
